# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(gamlss)#
library(dplyr)#
#
# Read in environment variables from .Renviron#
readRenviron(".Renviron")#
#
# -------------------------------------------------#
# 1. Load and Merge Simpson Alpha Diversity Data#
# -------------------------------------------------#
#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_pielou_e.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
pielou_e_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(pielou_e_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(pielou_e_data)[1] <- "SampleID_full"#
names(pielou_e_data)[2] <- "pielou_evenness"#
# Expected output:#
#   SampleID_full   chao1#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Chao1 column if needed (here it's already named "chao1")#
#
# Merge Chao1 data into your existing metadata (my_data)#
#
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)#
#
# Create a matching SampleID_full in the treatment data#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
my_data <- merge(my_data, pielou_e_data, by = "SampleID_full", all.x = TRUE)#
head(my_data)#
# Filter out any rows missing Pielou data#
my_data <- my_data[!is.na(my_data$pielou_evenness), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# Filter data for only short and long microplastics (exclude "0")#
plot_data <- subset(my_data, MicroplasticLength %in% c("S", "L"))#
#plot_data <- my_data#
# Convert MicroplasticConcentration (currently a factor) to a numeric variable#
# (Assuming the levels are "0", "10", "40"; these will become numeric 0, 10, 40)#
plot_data$MicroplasticConcentrationNumeric <- as.numeric(as.character(plot_data$MicroplasticConcentration))#
#
plot_data <- plot_data[, c("pielou_evenness", "MicroplasticLength", "MicroplasticConcentrationNumeric", "Parasite")]#
# Create the plot#
library(ggplot2)#
#
p <- ggplot(plot_data, aes(x = MicroplasticConcentrationNumeric, y = pielou_evenness, #
                             group = Parasite, color = Parasite)) +#
  geom_point(size = 3) +#
  geom_line(size = 1) +#
  facet_wrap(~ MicroplasticLength, nrow = 1, #
             labeller = labeller(MicroplasticLength = #
                                   c("S" = "Short Microplastics", "L" = "Long Microplastics"))) +#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)", breaks = c(0, 10, 40)) +#
  ylab("Diversity Measure (PieLou Evenness)") +#
  theme_minimal() +#
  theme(strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(p)
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(gamlss)#
library(dplyr)#
#
# Read in environment variables from .Renviron#
readRenviron(".Renviron")#
#
# -------------------------------------------------#
# 1. Load and Merge Simpson Alpha Diversity Data#
# -------------------------------------------------#
#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_faith_pd.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
faith_pd_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(faith_pd_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(faith_pd_data)[1] <- "SampleID_full"#
names(faith_pd_data)[2] <- "faith_pd"#
# Expected output:#
#   SampleID_full   chao1#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Chao1 column if needed (here it's already named "chao1")#
#
# Merge Chao1 data into your existing metadata (my_data)#
#
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)#
#
# Create a matching SampleID_full in the treatment data#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
my_data <- merge(my_data, faith_pd_data, by = "SampleID_full", all.x = TRUE)#
head(my_data)#
# Filter out any rows missing Chao1 data#
my_data <- my_data[!is.na(my_data$faith_pd), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# Filter data for only short and long microplastics (exclude "0")#
plot_data <- subset(my_data, MicroplasticLength %in% c("S", "L"))#
#plot_data <- my_data#
# Convert MicroplasticConcentration (currently a factor) to a numeric variable#
# (Assuming the levels are "0", "10", "40"; these will become numeric 0, 10, 40)#
plot_data$MicroplasticConcentrationNumeric <- as.numeric(as.character(plot_data$MicroplasticConcentration))#
#
plot_data <- plot_data[, c("faith_pd", "MicroplasticLength", "MicroplasticConcentrationNumeric", "Parasite")]#
# Create the plot#
library(ggplot2)#
#
p <- ggplot(plot_data, aes(x = MicroplasticConcentrationNumeric, y = faith_pd, #
                             group = Parasite, color = Parasite)) +#
  geom_point(size = 3) +#
  geom_line(size = 1) +#
  facet_wrap(~ MicroplasticLength, nrow = 1, #
             labeller = labeller(MicroplasticLength = #
                                   c("S" = "Short Microplastics", "L" = "Long Microplastics"))) +#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)", breaks = c(0, 10, 40)) +#
  ylab("Diversity Measure (Chao1)") +#
  theme_minimal() +#
  theme(strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(p)
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(gamlss)#
library(dplyr)#
#
# Read in environment variables from .Renviron#
readRenviron(".Renviron")#
#
# -------------------------------------------------#
# 1. Load and Merge Simpson Alpha Diversity Data#
# -------------------------------------------------#
#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_faith_pd.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
faith_pd_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(faith_pd_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(faith_pd_data)[1] <- "SampleID_full"#
names(faith_pd_data)[2] <- "faith_pd"#
# Expected output:#
#   SampleID_full   chao1#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Chao1 column if needed (here it's already named "chao1")#
#
# Merge Chao1 data into your existing metadata (my_data)#
#
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)#
#
# Create a matching SampleID_full in the treatment data#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
my_data <- merge(my_data, faith_pd_data, by = "SampleID_full", all.x = TRUE)#
head(my_data)#
# Filter out any rows missing Chao1 data#
my_data <- my_data[!is.na(my_data$faith_pd), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# Filter data for only short and long microplastics (exclude "0")#
plot_data <- subset(my_data, MicroplasticLength %in% c("S", "L"))#
#plot_data <- my_data#
# Convert MicroplasticConcentration (currently a factor) to a numeric variable#
# (Assuming the levels are "0", "10", "40"; these will become numeric 0, 10, 40)#
plot_data$MicroplasticConcentrationNumeric <- as.numeric(as.character(plot_data$MicroplasticConcentration))#
#
plot_data <- plot_data[, c("faith_pd", "MicroplasticLength", "MicroplasticConcentrationNumeric", "Parasite")]#
# Create the plot#
library(ggplot2)#
#
p <- ggplot(plot_data, aes(x = MicroplasticConcentrationNumeric, y = faith_pd, #
                             group = Parasite, color = Parasite)) +#
  geom_point(size = 3) +#
  geom_line(size = 1) +#
  facet_wrap(~ MicroplasticLength, nrow = 1, #
             labeller = labeller(MicroplasticLength = #
                                   c("S" = "Short Microplastics", "L" = "Long Microplastics"))) +#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)", breaks = c(0, 10, 40)) +#
  ylab("Diversity Measure (Faith PD)") +#
  theme_minimal() +#
  theme(strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(p)
p <- ggplot(my_data, aes(x = MicroplasticConcentrationNumeric, y = faith_pd, fill = Parasite)) +#
  geom_boxplot(outlier.shape = NA) +#
  facet_wrap(~ Group, nrow = 1, scales = "free_x",#
             labeller = labeller(Group = c("Control" = "0 Concentration (Control)",#
                                           "Treated" = "Treated Samples"))) +#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)",#
                     breaks = c(0, 10, 40)) +#
  ylab("Simpson Diversity") +#
  theme_minimal() +#
  theme(strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(p)
p <- ggplot(my_data, aes(x = MicroplasticConcentrationNumeric, y = faith_pd, fill = Parasite)) +#
  geom_boxplot(outlier.shape = NA) +#
  facet_wrap(~ Group, nrow = 1, scales = "free_x",#
             labeller = labeller(Group = c("Control" = "0 Concentration (Control)",#
                                           "Treated" = "Treated Samples"))) +#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)",#
                     breaks = c(0, 10, 40)) +#
  ylab("Simpson Diversity") +#
  theme_minimal() +#
  theme(strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(p)
p <- ggplot(my_data, aes(x = MicroplasticConcentrationNumeric, y = faith_pd, fill = Parasite)) +#
  geom_boxplot(outlier.shape = NA) +#
  facet_wrap(vars(Group), nrow = 1, scales = "free_x",#
             labeller = labeller(Group = c("Control" = "0 Concentration (Control)",#
                                           "Treated" = "Treated Samples"))) +#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)", breaks = c(0, 10, 40)) +#
  ylab("Simpson Diversity") +#
  theme_minimal() +#
  theme(#
    strip.text = element_text(size = 14),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    legend.title = element_blank()#
  )#
#
print(p)
my_data <- my_data[!is.na(my_data$MicroplasticConcentration), ]#
my_data$Group <- ifelse(my_data$MicroplasticConcentration == "0", "Control", "Treated")#
my_data$Group <- factor(my_data$Group, levels = c("Control", "Treated"))#
#
# Convert MicroplasticConcentration to numeric for plotting purposes.#
my_data$MicroplasticConcentrationNumeric <- as.numeric(as.character(my_data$MicroplasticConcentration))#
#
# -------------------------------#
# Create the box plot with facets#
# -------------------------------#
#
library(ggplot2)#
#
p <- ggplot(my_data, aes(x = MicroplasticConcentrationNumeric, y = faith_pd, fill = Parasite)) +#
  geom_boxplot(outlier.shape = NA) +#
  facet_wrap(~ Group, nrow = 1, scales = "free_x", drop = FALSE,#
             labeller = labeller(Group = c("Control" = "0 Concentration (Control)",#
                                           "Treated" = "Treated Samples"))) +#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)", breaks = c(0, 10, 40)) +#
  ylab("Simpson Diversity") +#
  theme_minimal() +#
  theme(strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(p)
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# Filter data for only short and long microplastics (exclude "0")#
plot_data <- subset(my_data, MicroplasticLength %in% c("S", "L"))#
#plot_data <- my_data#
# Convert MicroplasticConcentration (currently a factor) to a numeric variable#
# (Assuming the levels are "0", "10", "40"; these will become numeric 0, 10, 40)#
plot_data$MicroplasticConcentrationNumeric <- as.numeric(as.character(plot_data$MicroplasticConcentration))#
#
plot_data <- plot_data[, c("faith_pd", "MicroplasticLength", "MicroplasticConcentrationNumeric", "Parasite")]#
# Create the plot#
library(ggplot2)#
#
p <- ggplot(plot_data, aes(x = MicroplasticConcentrationNumeric, y = faith_pd, #
                             group = Parasite, color = Parasite)) +#
  geom_point(size = 3) +#
  geom_line(size = 1) +#
  facet_wrap(~ MicroplasticLength, nrow = 1, #
             labeller = labeller(MicroplasticLength = #
                                   c("S" = "Short Microplastics", "L" = "Long Microplastics"))) +#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)", breaks = c(0, 10, 40)) +#
  ylab("Diversity Measure (Faith PD)") +#
  theme_minimal() +#
  theme(strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(p)
print
print(p)
# Convert MicroplasticConcentrationNumeric to a factor for discrete x-axis plotting.#
plot_data$ConcentrationFactor <- factor(plot_data$MicroplasticConcentrationNumeric, levels = c(0, 10, 40))#
#
# Create the box plot for Faith PD with facets by MicroplasticLength.#
p <- ggplot(plot_data, aes(x = ConcentrationFactor, y = faith_pd, fill = Parasite)) +#
  geom_boxplot(outlier.shape = NA) +#
  facet_wrap(~ MicroplasticLength, nrow = 1,#
             labeller = labeller(MicroplasticLength = #
                                   c("S" = "Short Microplastics", "L" = "Long Microplastics"))) +#
  scale_x_discrete(name = "Microplastic Concentration (µg/L)") +#
  ylab("Diversity Measure (Faith PD)") +#
  theme_minimal() +#
  theme(strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(p)
library(qiime2R)#
library(ggplot2)#
library(gamlss)#
library(dplyr)#
#
# Read in environment variables from .Renviron#
readRenviron(".Renviron")#
#
# -------------------------------------------------#
# 1. Load and Merge Simpson Alpha Diversity Data#
# -------------------------------------------------#
#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"#
# Expected output:#
#   SampleID_full   simpson#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Simpson column if needed (here it's already named "simpson")#
#
# Merge Simpson data into your existing metadata (my_data)#
#
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)#
#
# Create a matching SampleID_full in the treatment data#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
my_data <- merge(my_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(my_data)#
# Filter out any rows missing Simpson data#
my_data <- my_data[!is.na(my_data$simpson), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# -------------------------------------------------#
# 3. Overall Model: Controls vs. Treatments#
# -------------------------------------------------#
#
# Create a pared-down data frame with only the necessary columns#
model_data_overall <- my_data[, c("simpson", "MicroplasticPresence", "Parasite")]#
#
# Check that the data has the expected levels#
table(model_data_overall$MicroplasticPresence)#
table(model_data_overall$Parasite)#
#
# Fit the overall gamlss BCT model (modeling only μ; sigma, nu, and tau estimated as intercept-only)#
model_overall_simpson <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_simpson)#
plot(model_overall_simpson)#
wp(model_overall_simpson)#
#
# Family:  c("BCT", "Box-Cox t") #
#
# Call:  gamlss(formula = simpson ~ MicroplasticPresence * Parasite, family = BCT,      data = model_data_overall, control = gamlss.control(n.cyc = 50)) #
#
# Fitting method: RS() #
#
# ------------------------------------------------------------------#
# Mu link function:  identity#
# Mu Coefficients:#
#                                        Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)                            0.921008   0.008026 114.756   <2e-16 ***#
# MicroplasticPresencePresent            0.001650   0.008886   0.186    0.853    #
# ParasiteP                              0.010199   0.011121   0.917    0.361    #
# MicroplasticPresencePresent:ParasiteP -0.018039   0.012365  -1.459    0.148    #
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Sigma link function:  log#
# Sigma Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept) -3.20676    0.07143   -44.9   <2e-16 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Nu link function:  identity #
# Nu Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)   20.663      1.886   10.96   <2e-16 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Tau link function:  log #
# Tau Coefficients:#
#              Estimate Std. Error  t value Pr(>|t|)    #
# (Intercept) 4.307e+01  1.010e-06 42641244   <2e-16 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# No. of observations in the fit:  98 #
# Degrees of Freedom for the fit:  7#
#       Residual Deg. of Freedom:  91 #
#                       at cycle:  16 #
# Global Deviance:     -379.8437 #
#             AIC:     -365.8437 #
#             SBC:     -347.749 #
# ******************************************************************#
model_overall_sigma <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  sigma.formula = ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 100)#
)#
summary(model_overall_sigma)#
# ******************************************************************#
# Family:  c("BCT", "Box-Cox t") #
#
# Call:  gamlss(formula = simpson ~ MicroplasticPresence * Parasite, sigma.formula = ~MicroplasticPresence *  #
#     Parasite, family = BCT, data = model_data_overall, control = gamlss.control(n.cyc = 50)) #
#
# Fitting method: RS() #
#
# ------------------------------------------------------------------#
# Mu link function:  identity#
# Mu Coefficients:#
#                                        Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)                            0.890641   0.009734  91.500  < 2e-16 ***#
# MicroplasticPresencePresent            0.033957   0.010413   3.261  0.00155 ** #
# ParasiteP                              0.051769   0.011187   4.627 1.18e-05 ***#
# MicroplasticPresencePresent:ParasiteP -0.062901   0.012420  -5.065 2.03e-06 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Sigma link function:  log#
# Sigma Coefficients:#
#                                       Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)                            -2.2288     0.2357  -9.456 2.64e-15 ***#
# MicroplasticPresencePresent            -1.0596     0.2609  -4.062 0.000101 ***#
# ParasiteP                              -1.5906     0.3249  -4.896 4.05e-06 ***#
# MicroplasticPresencePresent:ParasiteP   1.7280     0.3618   4.777 6.55e-06 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Nu link function:  identity #
# Nu Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)   20.537      1.555   13.21   <2e-16 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Tau link function:  log #
# Tau Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)   14.186      2.205   6.435  4.7e-09 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# No. of observations in the fit:  98 #
# Degrees of Freedom for the fit:  10#
#       Residual Deg. of Freedom:  88 #
#                       at cycle:  50 #
# Global Deviance:     -382.5917 #
#             AIC:     -362.5917 #
#             SBC:     -336.742 #
# ******************************************************************#
# -------------------------------------------------#
# 4. Treated Samples Model: Effects Among Treatments Only#
# -------------------------------------------------#
#
# Subset the data to include only treated samples (where microplastics are present)#
treated_data <- subset(my_data, MicroplasticPresence == "Present")#
#
# Create a new data frame that includes only the necessary columns#
treated_data <- treated_data[, c("simpson", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]#
#
# Drop any unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# Check the counts to confirm the expected levels for the treatment factors#
table(treated_data$MicroplasticConcentration)#
table(treated_data$MicroplasticLength)#
#
# Fit the gamlss BCT model for treated samples (modeling only μ)#
model_treated_simpson <- gamlss(#
  simpson ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  family = BCT,#
  data = treated_data,#
  control = gamlss.control(n.cyc = 100)#
)#
summary(model_treated_simpson)#
plot(model_treated_simpson)#
wp(model_treated_simpson)#
#
# ******************************************************************#
# Family:  c("BCT", "Box-Cox t") #
#
# Call:  gamlss(formula = simpson ~ MicroplasticLength * MicroplasticConcentration *  #
#     Parasite, family = BCT, data = treated_data, control = gamlss.control(n.cyc = 50)) #
#
# Fitting method: RS() #
#
# ------------------------------------------------------------------#
# Mu link function:  identity#
# Mu Coefficients:#
#                                                            Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)                                                0.926940   0.009048 102.447   <2e-16 ***#
# MicroplasticLengthL                                       -0.000281   0.010294  -0.027   0.9783    #
# MicroplasticConcentration40                               -0.001357   0.010327  -0.131   0.8958    #
# ParasiteP                                                 -0.018036   0.010396  -1.735   0.0873 .  #
# MicroplasticLengthL:MicroplasticConcentration40           -0.010727   0.014734  -0.728   0.4691    #
# MicroplasticLengthL:ParasiteP                              0.006656   0.014592   0.456   0.6497    #
# MicroplasticConcentration40:ParasiteP                      0.012880   0.014686   0.877   0.3836    #
# MicroplasticLengthL:MicroplasticConcentration40:ParasiteP  0.002619   0.020897   0.125   0.9006    #
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Sigma link function:  log#
# Sigma Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)  -3.2755     0.2401  -13.64   <2e-16 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Nu link function:  identity #
# Nu Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)    #
# (Intercept)   19.676      3.543   5.553 5.04e-07 ***#
# ---#
# Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1#
#
# ------------------------------------------------------------------#
# Tau link function:  log #
# Tau Coefficients:#
#             Estimate Std. Error t value Pr(>|t|)#
# (Intercept)    12.22     228.66   0.053    0.958#
#
# ------------------------------------------------------------------#
# No. of observations in the fit:  79 #
# Degrees of Freedom for the fit:  11#
#       Residual Deg. of Freedom:  68 #
#                       at cycle:  18 #
# Global Deviance:     -305.0496 #
#             AIC:     -283.0496 #
#             SBC:     -256.9857 #
# ******************************************************************#
# Fit the gamlss BCT model for treated samples (modeling both μ and σ)#
model_treated_simpson_sigma <- gamlss(#
  simpson ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  sigma.formula = ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  family = BCT,#
  data = treated_data,#
  control = gamlss.control(n.cyc = 100)#
)#
summary(model_treated_simpson_sigma)#
plot(model_treated_simpson_sigma)#
wp(model_treated_simpson_sigma)
p_overall_simpson <- ggplot(model_data_overall, #
                            aes(x = MicroplasticPresence, y = simpson, fill = Parasite)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = Parasite), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  labs(title = "Simpson Diversity by Microplastic Presence & Parasite",#
       x = "Microplastic Presence",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_overall_simpson
p_treated_simpson <- ggplot(my_data, #
                            aes(x = MicroplasticConcentration, y = simpson, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = MicroplasticLength), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simpson Diversity",#
       x = "Microplastic Concentration",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_treated_simpson
colnames(model_data_overall)
head(model_data_overall)
model_data_overall
p_treated_simpson <- ggplot(treated_data, #
                            aes(x = MicroplasticConcentration, y = simpson, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = MicroplasticLength), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simpson Diversity",#
       x = "Microplastic Concentration",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_treated_simpson
p_overall_simpson <- ggplot(model_data_overall, #
                            aes(x = MicroplasticPresence, y = simpson, fill = Parasite)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = Parasite), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  labs(title = "Simpson Diversity by Microplastic Presence & Parasite",#
       x = "Microplastic Presence",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_overall_simpson
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a new combined treatment variable based on concentration and length.#
# If concentration is "0", then label as "Control". Otherwise, label as "Treated_{Concentration}_{Length}"#
merged_data$CombinedTreatment <- ifelse(merged_data$MicroplasticConcentration == "0", #
                                    "Control", #
                                    paste("Treated",#
                                          merged_data$MicroplasticConcentration,#
                                          merged_data$MicroplasticLength,#
                                          sep = "_"))#
# Convert the new variable to a factor#
merged_data$CombinedTreatment <- factor(merged_data$CombinedTreatment)#
#
# Check the resulting levels#
table(merged_data$CombinedTreatment)
library(rcompanion)#
#
# note there is no scheirerRayHare that handles 3 factors in R, so here is our two factor test:#
scheirerRayHare(simpson ~ CombinedTreatment * Parasite, data = merged_data)
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
p_simpson <- ggplot(my_data, aes(x = MicroplasticLength, y = simpson, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simspon Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Simpson's Diversity") +#
  theme_minimal()#
#
p_simpson
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_chao1.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "chao1"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
output_plot <- ggplot(my_data, aes(x = MicroplasticLength, y = chao1, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Chao Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Chao Diversity (Richness)") +#
  theme_minimal()#
#
output_plot
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_chao1.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "chao1"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
output_plot <- ggplot(my_data, aes(x = MicroplasticLength, y = chao1, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Chao Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Chao Diversity (Richness)") +#
  theme_minimal()#
#
output_plot
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_chao1.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "chao1"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
output_plot <- ggplot(my_data, aes(x = MicroplasticLength, y = chao1, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Chao Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Chao Diversity (Richness)") +#
  theme_minimal()#
#
output_plot
output_plot
merged_data
output_plot <- ggplot(merged_data, aes(x = MicroplasticLength, y = chao1, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Chao Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Chao Diversity (Richness)") +#
  theme_minimal()#
#
output_plot
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
p_simpson <- ggplot(merged_data, aes(x = MicroplasticLength, y = simpson, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simspon Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Simpson's Diversity") +#
  theme_minimal()#
#
p_simpson
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_chao1.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "chao1"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
output_plot <- ggplot(merged_data, aes(x = MicroplasticLength, y = chao1, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Chao Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Chao Diversity (Richness)") +#
  theme_minimal()#
#
output_plot
library(rcompanion)#
#
scheirerRayHare(simpson ~ CombinedTreatment * Parasite, data = merged_data)
# Create a new combined treatment variable based on concentration and length.#
# If concentration is "0", then label as "Control". Otherwise, label as "Treated_{Concentration}_{Length}"#
merged_data$CombinedTreatment <- ifelse(merged_data$MicroplasticConcentration == "0", #
                                    "Control", #
                                    paste("Treated",#
                                          merged_data$MicroplasticConcentration,#
                                          merged_data$MicroplasticLength,#
                                          sep = "_"))#
# Convert the new variable to a factor#
merged_data$CombinedTreatment <- factor(merged_data$CombinedTreatment)#
#
library(rcompanion)#
#
scheirerRayHare(simpson ~ CombinedTreatment * Parasite, data = merged_data)
merged_dat
merged_data
merged_data$CombinedTreatment <- ifelse(merged_data$MicroplasticConcentration == "0", #
                                    "Control", #
                                    paste("Treated",#
                                          merged_data$MicroplasticConcentration,#
                                          merged_data$MicroplasticLength,#
                                          sep = "_"))#
# Convert the new variable to a factor#
merged_data$CombinedTreatment <- factor(merged_data$CombinedTreatment)#
#
library(rcompanion)#
#
scheirerRayHare(chao1 ~ CombinedTreatment * Parasite, data = merged_data)
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_pielou_e.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "pielou_evenness"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
output_plot <- ggplot(merged_data, aes(x = MicroplasticLength, y = pielou_evenness, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Evenness by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Pielou Diversity (Evenness)") +#
  theme_minimal()#
#
output_plot
# Create a new combined treatment variable based on concentration and length.#
# If concentration is "0", then label as "Control". Otherwise, label as "Treated_{Concentration}_{Length}"#
merged_data$CombinedTreatment <- ifelse(merged_data$MicroplasticConcentration == "0", #
                                    "Control", #
                                    paste("Treated",#
                                          merged_data$MicroplasticConcentration,#
                                          merged_data$MicroplasticLength,#
                                          sep = "_"))#
# Convert the new variable to a factor#
merged_data$CombinedTreatment <- factor(merged_data$CombinedTreatment)#
#
library(rcompanion)#
#
scheirerRayHare(pielou_evenness ~ CombinedTreatment * Parasite, data = merged_data)
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_faith_pd.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "faith_pd"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
output_plot <- ggplot(merged_data, aes(x = MicroplasticLength, y = faith_pd, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Faith Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Faith Diversity (Phylogenetic)") +#
  theme_minimal()#
#
output_plot
merged_data$CombinedTreatment <- ifelse(merged_data$MicroplasticConcentration == "0", #
                                    "Control", #
                                    paste("Treated",#
                                          merged_data$MicroplasticConcentration,#
                                          merged_data$MicroplasticLength,#
                                          sep = "_"))#
# Convert the new variable to a factor#
merged_data$CombinedTreatment <- factor(merged_data$CombinedTreatment)#
#
library(rcompanion)#
#
scheirerRayHare(faith_pd ~ CombinedTreatment * Parasite, data = merged_data)
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Shannon Diversity Data#
# -------------------------------#
#
# Read the exported Shannon diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_shannon.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "shannon"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "shannon"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
output_plot <- ggplot(merged_data, aes(x = MicroplasticLength, y = shannon, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Shannon Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Shannon Diversity") +#
  theme_minimal()#
#
output_plot
merged_data$CombinedTreatment <- ifelse(merged_data$MicroplasticConcentration == "0", #
                                    "Control", #
                                    paste("Treated",#
                                          merged_data$MicroplasticConcentration,#
                                          merged_data$MicroplasticLength,#
                                          sep = "_"))#
# Convert the new variable to a factor#
merged_data$CombinedTreatment <- factor(merged_data$CombinedTreatment)#
#
library(rcompanion)#
#
scheirerRayHare(shannon ~ CombinedTreatment * Parasite, data = merged_data)#
# DV:  chao1 #
# Observations:  98 #
# D:  0.9999745 #
# MS total:  808.5
# Load required libraries#
library(vegan)#
library(dplyr)#
library(ggplot2)#
readRenviron(".Renviron")#
#
# -------------------------------------------#
# 1. Load Treatment Metadata and Create IDs#
# -------------------------------------------#
metadata_path <- file.path(Sys.getenv("BASE_DATA_PATH"),#
                           "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv")#
my_data <- read.csv(metadata_path, header = TRUE, stringsAsFactors = FALSE)#
#
# Create a full sample ID (e.g., "KA001", "KA002", etc.)#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Convert treatment variables to factors:#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# -------------------------------------------#
# 2. Create Combined Treatment Variable#
# -------------------------------------------#
# For samples with 0 concentration, assign "Control". For others, combine concentration and length.#
my_data$CombinedTreatment <- ifelse(my_data$MicroplasticConcentration == "0",#
                                    "Control",#
                                    paste("Treated",#
                                          my_data$MicroplasticConcentration,#
                                          my_data$MicroplasticLength,#
                                          sep = "_"))#
my_data$CombinedTreatment <- factor(my_data$CombinedTreatment)#
table(my_data$CombinedTreatment)  # Check the levels#
#
# -------------------------------------------#
# 3. Load Bray-Curtis Distance Matrix#
# -------------------------------------------#
bray_file <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_bray_curtis_distance.tsv")#
bray_matrix <- read.table(bray_file, header = TRUE, sep = "\t", row.names = 1, check.names = FALSE)#
bray_dist <- as.dist(bray_matrix)#
#
# -------------------------------------------#
# 4. Match Metadata with Distance Matrix Samples#
# -------------------------------------------#
common_samples <- intersect(rownames(bray_matrix), my_data$SampleID_full)#
my_data_subset <- my_data[my_data$SampleID_full %in% common_samples, ]#
# Reorder metadata to match the row order in the distance matrix#
my_data_subset <- my_data_subset[match(rownames(bray_matrix), my_data_subset$SampleID_full), ]#
bray_matrix_subset <- as.dist(bray_matrix[common_samples, common_samples])#
#
# -------------------------------------------#
# 5. Perform NMDS on the Bray-Curtis Distance Matrix#
# -------------------------------------------#
nmds_global <- metaMDS(bray_matrix_subset, k = 2, trymax = 100)#
scores_global <- as.data.frame(scores(nmds_global))#
scores_global$SampleID <- rownames(scores_global)#
scores_global <- merge(scores_global, my_data_subset, by.x = "SampleID", by.y = "SampleID_full")#
#
# -------------------------------------------#
# 6. Create NMDS Plot for the Full Model#
# -------------------------------------------#
# Mapping: CombinedTreatment (color) and Parasite (shape)#
p_global <- ggplot(scores_global, aes(x = NMDS1, y = NMDS2, #
                                        color = CombinedTreatment, #
                                        shape = Parasite)) +#
  geom_point(size = 3) +#
  stat_ellipse(aes(group = interaction(CombinedTreatment, Parasite)), #
               type = "t", size = 1, linetype = "dashed") +#
  labs(title = "NMDS Ordination: Parasite * CombinedTreatment",#
       color = "Combined Treatment",#
       shape = "Parasite Status") +#
  theme_minimal() +#
  theme(axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_text(size = 12),#
        legend.text = element_text(size = 10))#
print(p_global)
# Load vegan package (if not already loaded)#
library(vegan)#
#
# Run PERMANOVA with 999 permutations#
permanova_results <- adonis(bray_matrix_subset ~ Parasite * CombinedTreatment, #
                            data = my_data_subset, permutations = 999)#
#
# Print the PERMANOVA results#
print(permanova_results)
bray_matrix_subset
my_Data_subset
my_data_subset
head(metadata_filtered)#
table(metadata_filtered$Parasite)#
table(metadata_filtered$CombinedTreatment)
metadata_filtered <- my_data_subset[, c("SampleID_full", "Parasite", "CombinedTreatment")]
head(metadata_filtered)#
table(metadata_filtered$Parasite)#
table(metadata_filtered$CombinedTreatment)
# ---------------------------------------------#
# Run PERMANOVA using the filtered metadata#
# ---------------------------------------------#
set.seed(123)  # Set seed for reproducibility#
permanova_results <- adonis(bray_matrix_subset ~ Parasite * CombinedTreatment, #
                            data = metadata_filtered, #
                            permutations = 999)#
#
# Print the PERMANOVA results#
print(permanova_results)
set.seed(123)  # Set seed for reproducibility#
permanova_results <- adonis2(bray_matrix_subset ~ Parasite * CombinedTreatment, #
                            data = metadata_filtered, #
                            permutations = 999)#
#
# Print the PERMANOVA results#
print(permanova_results)
set.seed(123)  # Set seed for reproducibility#
permanova_results <- adonis2(bray_matrix_subset ~ Parasite * CombinedTreatment, #
                            data = metadata_filtered, #
                            permutations = 999,#
                            by="terms")#
#
# Print the PERMANOVA results#
print(permanova_results)
metadata_filtered
my_data_subset
library(vegan)#
library(dplyr)#
library(ggplot2)#
readRenviron(".Renviron")#
#
# -------------------------------------------#
# 1. Load Treatment Metadata and Create IDs#
# -------------------------------------------#
metadata_path <- file.path(Sys.getenv("BASE_DATA_PATH"),#
                           "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv")#
my_data <- read.csv(metadata_path, header = TRUE, stringsAsFactors = FALSE)#
#
# Create a full sample ID (e.g., "KA001", "KA002", etc.)#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Convert treatment variables to factors:#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# -------------------------------------------#
# 2. Create Combined Treatment Variable#
# -------------------------------------------#
# For samples with 0 concentration, assign "Control". For others, combine concentration and length.#
my_data$CombinedTreatment <- ifelse(my_data$MicroplasticConcentration == "0",#
                                    "Control",#
                                    paste("Treated",#
                                          my_data$MicroplasticConcentration,#
                                          my_data$MicroplasticLength,#
                                          sep = "_"))#
my_data$CombinedTreatment <- factor(my_data$CombinedTreatment)#
table(my_data$CombinedTreatment)  # Check the levels#
#
# -------------------------------------------#
# 3. Load Bray-Curtis Distance Matrix#
# -------------------------------------------#
bray_file <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_bray_curtis_distance.tsv")#
bray_matrix <- read.table(bray_file, header = TRUE, sep = "\t", row.names = 1, check.names = FALSE)#
bray_dist <- as.dist(bray_matrix)#
#
# -------------------------------------------#
# 4. Match Metadata with Distance Matrix Samples#
# -------------------------------------------#
common_samples <- intersect(rownames(bray_matrix), my_data$SampleID_full)#
my_data_subset <- my_data[my_data$SampleID_full %in% common_samples, ]
common_samples
my_data_subset
my_data_subset <- my_data_subset[match(rownames(bray_matrix), my_data_subset$SampleID_full), ]
my_data_subset
common_samples <- intersect(rownames(bray_matrix), my_data_subset$SampleID_full)#
#
# Subset and reorder my_data_subset to include only those common samples, in the order they appear in the distance matrix#
my_data_subset <- my_data_subset[match(common_samples, my_data_subset$SampleID_full), ]#
#
# Also, if needed, subset the distance matrix to include only these common samples:#
bray_matrix_subset <- as.dist(as.matrix(bray_matrix)[common_samples, common_samples])
my_data_subset
# Load required libraries#
library(vegan)#
library(dplyr)#
library(ggplot2)#
readRenviron(".Renviron")#
#
# -------------------------------------------#
# 1. Load Treatment Metadata and Create IDs#
# -------------------------------------------#
metadata_path <- file.path(Sys.getenv("BASE_DATA_PATH"),#
                           "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv")#
my_data <- read.csv(metadata_path, header = TRUE, stringsAsFactors = FALSE)#
#
# Create a full sample ID (e.g., "KA001", "KA002", etc.)#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Convert treatment variables to factors:#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# -------------------------------------------#
# 2. Create Combined Treatment Variable#
# -------------------------------------------#
# For samples with 0 concentration, assign "Control". For others, combine concentration and length.#
my_data$CombinedTreatment <- ifelse(my_data$MicroplasticConcentration == "0",#
                                    "Control",#
                                    paste("Treated",#
                                          my_data$MicroplasticConcentration,#
                                          my_data$MicroplasticLength,#
                                          sep = "_"))#
my_data$CombinedTreatment <- factor(my_data$CombinedTreatment)#
table(my_data$CombinedTreatment)  # Check the levels#
#
# -------------------------------------------#
# 3. Load Bray-Curtis Distance Matrix#
# -------------------------------------------#
bray_file <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_bray_curtis_distance.tsv")#
bray_matrix <- read.table(bray_file, header = TRUE, sep = "\t", row.names = 1, check.names = FALSE)#
bray_dist <- as.dist(bray_matrix)#
#
# -------------------------------------------#
# 4. Match Metadata with Distance Matrix Samples#
# -------------------------------------------#
# Identify common sample IDs between the Bray–Curtis matrix and metadata#
common_samples <- intersect(rownames(bray_matrix), my_data_subset$SampleID_full)#
#
# Subset and reorder my_data_subset to include only those common samples, in the order they appear in the distance matrix#
my_data_subset <- my_data_subset[match(common_samples, my_data_subset$SampleID_full), ]#
#
# Also, if needed, subset the distance matrix to include only these common samples:#
bray_matrix_subset <- as.dist(as.matrix(bray_matrix)[common_samples, common_samples])#
#
# -------------------------------------------#
# 5. Perform NMDS on the Bray-Curtis Distance Matrix#
# -------------------------------------------#
nmds_global <- metaMDS(bray_matrix_subset, k = 2, trymax = 100)#
scores_global <- as.data.frame(scores(nmds_global))#
scores_global$SampleID <- rownames(scores_global)#
scores_global <- merge(scores_global, my_data_subset, by.x = "SampleID", by.y = "SampleID_full")#
#
# -------------------------------------------#
# 6. Create NMDS Plot for the Full Model#
# -------------------------------------------#
# Mapping: CombinedTreatment (color) and Parasite (shape)#
p_global <- ggplot(scores_global, aes(x = NMDS1, y = NMDS2, #
                                        color = CombinedTreatment, #
                                        shape = Parasite)) +#
  geom_point(size = 3) +#
  stat_ellipse(aes(group = interaction(CombinedTreatment, Parasite)), #
               type = "t", size = 1, linetype = "dashed") +#
  labs(title = "NMDS Ordination: Parasite * CombinedTreatment",#
       color = "Combined Treatment",#
       shape = "Parasite Status") +#
  theme_minimal() +#
  theme(axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_text(size = 12),#
        legend.text = element_text(size = 10))#
print(p_global)
print(p_global)#
#
metadata_filtered <- my_data_subset[, c("SampleID_full", "Parasite", "CombinedTreatment")]#
#
set.seed(123)  # Set seed for reproducibility#
permanova_results <- adonis2(bray_matrix_subset ~ Parasite * CombinedTreatment, #
                            data = metadata_filtered, #
                            permutations = 999,#
                            by="terms")#
#
# Print the PERMANOVA results#
print(permanova_results)
metadata_filtered <- my_data_subset[, c("SampleID_full", "Parasite", "CombinedTreatment")]#
#
set.seed(123)  # Set seed for reproducibility#
permanova_results <- adonis2(bray_matrix_subset ~ Parasite * CombinedTreatment, #
                            data = metadata_filtered, #
                            permutations = 999,#
                            by="terms")#
#
# Print the PERMANOVA results#
print(permanova_results)
if (!require("remotes")) install.packages("remotes")#
#
# Then install pairwiseAdonis from GitHub:#
remotes::install_github("pmartinezarbizu/pairwise.adonis")#
#
# Load the package#
library(pairwiseAdonis)
library('remotes')
remotes::install_github("pmartinezarbizu/pairwise.adonis")
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)#
#
# Run pairwise PERMANOVA using the Bray-Curtis distance matrix and CombinedTreatment grouping.#
# Here, bray_matrix_subset is our distance matrix (aligned with the metadata) and #
# my_data_subset$CombinedTreatment is our grouping variable.#
set.seed(123)  # for reproducibility of permutation tests#
pairwise_results <- pairwise.adonis(bray_matrix_subset, my_data_subset$CombinedTreatment,#
                                    permutations = 999, p.adjust.m = "bonferroni")#
# Print the pairwise comparisons results#
print(pairwise_results)
set.seed(123)  # for reproducibility of permutation tests#
pairwise_results <- pairwise.adonis(bray_matrix_subset, my_data_subset$CombinedTreatment,#
                                    p.adjust.m = "bonferroni")#
# Print the pairwise comparisons results#
print(pairwise_results)
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_chao1.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "chao1"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))
output_plot <- ggplot(merged_data, aes(x = MicroplasticLength, y = chao1, color = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_wrap(~ Parasite) +#
  scale_color_manual(values = c("0" = "plum4", "10" = "chocolate3", "40" = "darkorange2")) +#
  labs(title = "Chao Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Chao Diversity (Richness)") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        axis.line = element_blank(),#
        strip.text = element_text(size = 14),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        legend.title = element_blank())#
#
print(output_plot)
library(viridis)  # For the viridis color palettes#
#
output_plot <- ggplot(merged_data, aes(x = MicroplasticLength, y = chao1, fill = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_wrap(~ Parasite) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(title = "Chao Diversity by Length, Concentration, & Parasite",#
       x = "Microplastic Length",#
       y = "Chao Diversity (Richness)") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14))#
print(output_plot)
output_plot <- ggplot(merged_data, aes(x = MicroplasticConcentration, y = chao1, fill = MicroplasticConcentration)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(Parasite = c("NP" = "No Parasite", "P" = "Parasite"))) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Chao Diversity (Richness)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        # Add a visible border around each facet to act as a dividing line#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        # Increase horizontal spacing between facets#
        panel.spacing.x = unit(1, "lines"))#
#
print(output_plot)
output_plot <- ggplot(merged_data, aes(x = MicroplasticConcentration, y = chao1, fill = MicroplasticLength)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(Parasite = c("NP" = "No Parasite", "P" = "Parasite"))) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Chao Diversity (Richness)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        # Add a visible border around each facet to act as a dividing line#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        # Increase horizontal spacing between facets#
        panel.spacing.x = unit(1, "lines"))#
#
print(output_plot)
output_plot <- ggplot(merged_data, aes(x = MicroplasticConcentration, y = chao1, fill = MicroplasticLength)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(Parasite = c("NP" = "No Parasite", "P" = "Parasite"))) +#
  scale_fill_viridis_d(name = "Microplastic Length",#
                       labels = c("Control", "Short", "Long"),#
                       option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Chao Diversity (Richness)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        # Removing default legend title since we're setting it via scale_fill_viridis_d#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))#
#
print(output_plot)
output_plot <- ggplot(merged_data, aes(x = MicroplasticConcentration, y = shannon, fill = MicroplasticLength)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(Parasite = c("NP" = "No Parasite", "P" = "Parasite"))) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Chao Diversity (Richness)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        # Add a visible border around each facet to act as a dividing line#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        # Increase horizontal spacing between facets#
        panel.spacing.x = unit(1, "lines"))#
#
print(output_plot)
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Shannon Diversity Data#
# -------------------------------#
#
# Read the exported Shannon diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_shannon.tsv")#
tsv_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(tsv_data)#
#
# Rename the first column to "SampleID_full" and the second column to "shannon"#
names(tsv_data)[1] <- "SampleID_full"#
names(tsv_data)[2] <- "shannon"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Shannon diversity data#
merged_data <- merge(treatment_data, tsv_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))
library(viridis)#
#
output_plot <- ggplot(merged_data, aes(x = MicroplasticConcentration, y = shannon, fill = MicroplasticLength)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(Parasite = c("NP" = "No Parasite", "P" = "Parasite"))) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Chao Diversity (Richness)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        # Add a visible border around each facet to act as a dividing line#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        # Increase horizontal spacing between facets#
        panel.spacing.x = unit(1, "lines"))#
#
print(output_plot)
output_plot <- ggplot(merged_data, aes(x = MicroplasticConcentration, y = shannon, fill = MicroplasticLength)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(Parasite = c("NP" = "No Parasite", "P" = "Parasite"))) +#
  scale_fill_viridis_d(name = "Microplastic Length",#
                       labels = c("Control", "Short", "Long"),#
                       option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Shannon Entropy",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        # Removing default legend title since we're setting it via scale_fill_viridis_d#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))#
#
print(output_plot)
library(viridis)#
#
output_plot <- ggplot(merged_data, aes(x = MicroplasticConcentration, y = shannon, fill = MicroplasticLength)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(Parasite = c("NP" = "No Parasite", "P" = "Parasite"))) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Shannon Diversity Index",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        # Add a visible border around each facet to act as a dividing line#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        # Increase horizontal spacing between facets#
        panel.spacing.x = unit(1, "lines"))#
#
print(output_plot)
output_plot <- ggplot(merged_data, aes(x = MicroplasticConcentration, y = shannon, fill = MicroplasticLength)) +#
  geom_boxplot(position = position_dodge(width = 0.75), outlier.shape = NA) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(Parasite = c("NP" = "No Parasite", "P" = "Parasite"))) +#
  scale_fill_viridis_d(name = "Microplastic Length",#
                       labels = c("Control", "Short", "Long"),#
                       option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Shannon Diversity Index",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        # Removing default legend title since we're setting it via scale_fill_viridis_d#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))#
#
print(output_plot)
beta_boxplot <- ggplot(scores_global, aes(x = MicroplasticConcentration, y = NMDS1, fill = MicroplasticConcentration)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(Parasite ~ MicroplasticLength, #
             labeller = labeller(#
               Parasite = c("NP" = "No Parasite", "P" = "Parasite"),#
               MicroplasticLength = c("0" = "Control", "S" = "Short", "L" = "Long")#
             )) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "NMDS1",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        legend.position = "none")#
#
print(beta_boxplot)
beta_boxplot <- ggplot(scores_global, aes(x = MicroplasticConcentration, y = NMDS1, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(#
               Parasite = c("NP" = "No Parasite", "P" = "Parasite"),#
               MicroplasticLength = c("0" = "Control", "S" = "Short", "L" = "Long")#
             )) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "NMDS1",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        legend.position = "none")#
#
print(beta_boxplot)
beta_boxplot <- ggplot(scores_global, aes(x = MicroplasticConcentration, y = NMDS1, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(#
               Parasite = c("NP" = "No Parasite", "P" = "Parasite"),#
               MicroplasticLength = c("0" = "Control", "S" = "Short", "L" = "Long")#
             )) +#
  scale_fill_viridis_d(option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Ordination Score (NMDS 1)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        legend.position = "none")#
#
print(beta_boxplot)
beta_boxplot <- ggplot(scores_global, aes(x = MicroplasticConcentration, y = NMDS1, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(#
               Parasite = c("NP" = "No Parasite", "P" = "Parasite"),#
               MicroplasticLength = c("0" = "Control", "S" = "Short", "L" = "Long")#
             )) +#
  scale_fill_viridis_d(name = "Microplastic Length",#
                       labels = c("Control", "Short", "Long"),#
                       option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Ordination Score (NMDS 1)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        legend.position = "none")#
#
print(beta_boxplot)
scale_fill_viridis_d(name = "Microplastic Length",#
                       labels = c("Control", "Short", "Long"),#
                       option = "plasma") +
beta_boxplot <- ggplot(scores_global, aes(x = MicroplasticConcentration, y = NMDS1, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(#
               Parasite = c("NP" = "No Parasite", "P" = "Parasite"),#
               MicroplasticLength = c("0" = "Control", "S" = "Short", "L" = "Long")#
             )) +#
  scale_fill_viridis_d(name = "Microplastic Length",#
                       labels = c("Control", "Short", "Long"),#
                       option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Ordination Score (NMDS 1)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        legend.position = "none")#
#
print(beta_boxplot)
beta_boxplot <- ggplot(scores_global, aes(x = MicroplasticConcentration, y = NMDS1, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.75)) +#
  geom_jitter(position = position_dodge(width = 0.75), alpha = 0.7, size = 2) +#
  facet_grid(. ~ Parasite, #
             labeller = labeller(#
               Parasite = c("NP" = "No Parasite", "P" = "Parasite"),#
               MicroplasticLength = c("0" = "Control", "S" = "Short", "L" = "Long")#
             )) +#
  scale_fill_viridis_d(name = "Microplastic Length",#
                       labels = c("Control", "Short", "Long"),#
                       option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Ordination Score (NMDS 1)",#
       title = NULL) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        # Removing default legend title since we're setting it via scale_fill_viridis_d#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))#
#
print(beta_boxplot)
library(tidyverse)#
#
# Set the input file name (adjust if your file is named differently)#
input_file <- "level-2.csv"#
#
# Read in the data. This assumes a comma-delimited CSV file.#
# If your file is tab-delimited, replace read_csv with read_tsv.#
data <- read_csv(input_file)#
#
# Identify the taxonomy columns.#
# In this dataset, column names starting with "d__" are taxonomic counts.#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Reshape from wide to long format:#
# Each row now corresponds to one sample-taxonomy pairing.#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Abundance"#
  )
renv::install('tidyverse')
library(tidyverse)#
#
# Set the input file name (adjust if your file is named differently)#
input_file <- "level-2.csv"#
#
# Read in the data. This assumes a comma-delimited CSV file.#
# If your file is tab-delimited, replace read_csv with read_tsv.#
data <- read_csv(input_file)
readRenviron(".Renviron")#
# Load required libraries#
library(tidyverse)#
#
# Read in the data. This assumes a comma-delimited CSV file.#
# If your file is tab-delimited, replace read_csv with read_tsv.#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
csv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "level-2-rarefied.csv")#
data <- read_csv(csv_path)
data
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Reshape from wide to long format:#
# Each row now corresponds to one sample-taxonomy pairing.#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Abundance"#
  )
data_long
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Abundance / sum(Abundance, na.rm = TRUE)) %>%#
  ungroup()#
#
# Create a composite grouping variable for treatments.#
# This combines Parasite, MPF_length, and Concentration.#
data_long <- data_long %>%#
  mutate(Group = paste(Parasite, MPF_length, Concentration, sep = "_"))
p <- ggplot(data_long, aes(x = Group, y = RelAbundance, fill = Taxon)) +#
  geom_bar(stat = "identity") +#
  theme_minimal() +#
  labs(#
    x = "Treatment Group (Parasite_MPF_length_Concentration)",#
    y = "Relative Abundance",#
    title = "Community Composition by Treatment",#
    fill = "Taxon"#
  ) +#
  theme(axis.text.x = element_text(angle = 45, hjust = 1))#
#
# Display the plot#
print(p)
csv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "level-2-rarefied.csv")#
data <- read_csv(csv_path)#
#
# Identify the taxonomy columns.#
# In this dataset, column names starting with "d__" are taxonomic counts.#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Reshape from wide to long format:#
# Each row now corresponds to one sample-taxonomy pairing.#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Abundance"#
  )#
#
# Compute relative abundance per sample.#
# The relative abundance is the fraction of the total counts per sample.#
# Here we assume that the "index" column uniquely identifies each sample.#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Abundance / sum(Abundance, na.rm = TRUE)) %>%#
  ungroup()#
#
# ----- 3. Ensure treatment columns are factors -----#
# Adjust column names if needed. Here we assume that:#
# - "Parasite" has values such as "NP" and "P" which we relabel as "No Parasite" and "Parasite".#
# - "MPF_length" (i.e. Microplastic Length) includes levels "Control", "Short", "Long".#
# - "Concentration" corresponds to Microplastic Concentration.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# ----- 4. Aggregate data by treatment -----#
# Compute the mean relative abundance per Taxon for each treatment combination#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# Compute total abundance per grouped bar (should be ~1 if all samples sum to 1)#
# We'll use this to position the MPF_length label.#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop")#
#
# ----- 5. Create a grouped stacked bar plot -----#
# We want:#
# - x-axis: Microplastic Concentration.#
# - Bars dodged by MPF_length.#
# - Stacked fill by Taxon.#
# - Faceted by Parasite.#
# - And a label above each bar indicating the MPF_length.#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon)) +#
  # Dodge bars by MPF_length; position_dodge2 allows grouping within the same x value#
  geom_bar(stat = "identity",#
           position = position_dodge2(padding = 0.1, preserve = "single"),#
           width = 0.7) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(#
    x = "Microplastic Concentration (µg/L)",#
    y = "Mean Relative Abundance",#
    title = "Community Composition by Treatment"#
  ) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))#
#
# Add labels above each bar group to indicate the MPF_length.#
# Here, we position the text just above the top of the bar.#
p <- p + geom_text(#
  data = label_data,#
  aes(label = MPF_length, y = total + 0.05),#
  position = position_dodge2(width = 0.7, padding = 0.1),#
  size = 4,#
  vjust = 0#
)#
#
# ----- 6. Output the Plot -----#
# Print the plot to the console/window#
print(p)
group_summary
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon)) +#
  # Dodge bars by MPF_length; position_dodge2 allows grouping within the same x value#
  geom_bar(stat = "identity",#
           position = position_dodge2(padding = 0.1, preserve = "single"),#
           width = 0.7) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(#
    x = "Microplastic Concentration (µg/L)",#
    y = "Mean Relative Abundance",#
    title = "Community Composition by Treatment"#
  ) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
p <- ggplot(group_summary, aes(x = Treatment, y = mean_RelAbundance, fill = Taxon)) +#
  geom_bar(stat = "identity", position = "stack") +#
  facet_grid(. ~ Parasite) +#
  # Modify x-axis labels to show only the Concentration value (split the Treatment string by underscore)#
  scale_x_discrete(labels = function(x) sapply(strsplit(x, "_"), `[`, 1)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(#
    x = "Microplastic Concentration (µg/L)",#
    y = "Mean Relative Abundance",#
    title = "Community Composition by Treatment"#
  ) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
p <- ggplot(group_summary, aes(x = Treatment, y = mean_RelAbundance, fill = Taxon)) +#
  geom_bar(stat = "identity", position = "stack") +#
  facet_grid(. ~ Parasite) +#
  # Modify x-axis labels to show only the Concentration value (split the Treatment string by underscore)#
  scale_x_discrete(labels = function(x) sapply(strsplit(x, "_"), `[`, 1)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(#
    x = "Microplastic Concentration (µg/L)",#
    y = "Mean Relative Abundance",#
    title = "Community Composition by Treatment"#
  ) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
p <- ggplot(group_summary, aes(x = Treatment, y = mean_RelAbundance, fill = Taxon)) +#
  geom_bar(stat = "identity", position = "stack") +#
  facet_grid(. ~ Parasite) +#
  # Modify x-axis labels to show only the Concentration value (split the Treatment string by underscore)#
  scale_x_discrete(labels = function(x) sapply(strsplit(x, "_"), `[`, 1)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(#
    x = "Microplastic Concentration (µg/L)",#
    y = "Mean Relative Abundance",#
    title = "Community Composition by Treatment"#
  ) +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# 3. Compute relative abundance per sample#
data_long <- data_long %>%#
  group_by(index) %>%   # assumes "index" uniquely identifies each sample#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 4. Ensure treatment columns are factors and optionally relabel Parasite.#
# Adjust the levels as needed.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)  # assume concentrations are stored in a column called Concentration#
  )#
#
# 5. Aggregate data by treatment combination.#
# Here we compute the mean relative abundance for each Taxon within each combination.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# For labeling each bar, compute the total stacked height per combination of (Parasite, Concentration, MPF_length)#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop")#
#
# 6. Create the stacked bar plot with dodged groups#
# - x-axis: Microplastic Concentration.#
# - Bars are grouped (dodged) by MPF_length.#
# - Each bar is stacked (fill = Taxon).#
# - Faceted by Parasite.#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_bar(stat = "identity", #
           position = position_dodge2(width = 0.9, preserve = "single"),#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_bar(stat = "identity", #
           position = position_dodge2(width = 0.9, preserve = "single"),#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))#
#
# 7. Add labels above each bar to indicate MPF_length.#
# Use the same dodge position as for the bars.#
p <- p + geom_text(#
  data = label_data,#
  aes(x = Concentration, y = total + 0.05, label = MPF_length),#
  position = position_dodge2(width = 0.9, preserve = "single"),#
  size = 4,#
  vjust = 0#
)#
#
# 8. Output the plot#
print(p)
# Identify taxonomy columns (assumed to start with "d__")#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 2. Compute relative abundance per sample#
# -------------------------------#
# (Assuming "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 3. Ensure treatment columns are factors#
# -------------------------------#
# Adjust factor levels as needed.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 4. Aggregate data by treatment#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of#
# Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# Create a composite grouping variable ("combo") that combines Concentration and MPF_length.#
# This will be used for dodging, while the x-axis itself remains Concentration.#
group_summary <- group_summary %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# Prepare label data (one record per unique treatment: Concentration & MPF_length)#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# -------------------------------#
# 5. Create the stacked and dodged bar plot#
# -------------------------------#
# Mapping:#
#   • x: Concentration (so only concentration appears on the axis)#
#   • y: mean_RelAbundance (the height of the bars)#
#   • fill: Taxon (each bar will be internally stacked by taxon)#
#   • group: combo (ensures that within each Concentration the different MPF_length bars are dodged separately)#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = combo)) +#
  geom_bar(stat = "identity", #
           position = position_dodge2(width = 0.9, preserve = "single"),#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 2. Compute relative abundance per sample#
# -------------------------------#
# (Assuming "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 3. Ensure treatment columns are factors#
# -------------------------------#
# Adjust factor levels as needed.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 4. Aggregate data by treatment#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of#
# Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# Create a composite grouping variable ("combo") that combines Concentration and MPF_length.#
# This will be used for dodging, while the x-axis itself remains Concentration.#
group_summary <- group_summary %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# Prepare label data (one record per unique treatment: Concentration & MPF_length)#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# -------------------------------#
# 5. Create the stacked and dodged bar plot#
# -------------------------------#
# Mapping:#
#   • x: Concentration (so only concentration appears on the axis)#
#   • y: mean_RelAbundance (the height of the bars)#
#   • fill: Taxon (each bar will be internally stacked by taxon)#
#   • group: combo (ensures that within each Concentration the different MPF_length bars are dodged separately)#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = combo)) +#
  geom_bar(stat = "identity", #
           position = "stack",#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_bar(stat = "identity", #
           position = "stack",#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_bar(stat = "identity", #
           position = "stack",#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
ggroup_summary
group_summary
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 2. Compute relative abundance per sample#
# -------------------------------#
# (Assuming "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 3. Ensure treatment columns are factors#
# -------------------------------#
# Adjust factor levels as needed.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 4. Aggregate data by treatment#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of#
# Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# Create a composite grouping variable ("combo") that combines Concentration and MPF_length.#
# This will be used for dodging, while the x-axis itself remains Concentration.#
group_summary <- group_summary %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# Prepare label data (one record per unique treatment: Concentration & MPF_length)#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# -------------------------------#
# 5. Create the stacked and dodged bar plot#
# -------------------------------#
# Mapping:#
#   • x: Concentration (so only concentration appears on the axis)#
#   • y: mean_RelAbundance (the height of the bars)#
#   • fill: Taxon (each bar will be internally stacked by taxon)#
#   • group: combo (ensures that within each Concentration the different MPF_length bars are dodged separately)#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_bar(stat = "identity", #
           position = "stack",#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Pivot the wide-format data to long format: each row is a sample–taxon combination.#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 3. Compute relative abundance per sample#
# -------------------------------#
# (Assuming a column named "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 4. Ensure treatment columns are factors#
# -------------------------------#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 5. Aggregate data by treatment combination#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# Create a composite variable 'combo' that uniquely identifies each concentration–MPF_length combination.#
group_summary <- group_summary %>%#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# For labeling, compute the total stacked height for each combo.#
label_data <- group_summary %>%#
  group_by(combo, Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop")#
#
# -------------------------------#
# 6. Create the stacked (by Taxon) bar plot using the composite variable as x#
# -------------------------------#
# Here, x is mapped to combo so that each bar is unique (one per Concentration × MPF_length).#
# We use the default stacking (position = "stack") to stack taxa within each combo.#
p <- ggplot(group_summary, aes(x = combo, y = mean_RelAbundance, fill = Taxon)) +#
  geom_bar(stat = "identity", position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  # Modify x-axis tick labels: split the composite name at "_" and extract the Concentration portion.#
  scale_x_discrete(name = "Microplastic Concentration (µg/L)",#
                   labels = function(x) sapply(strsplit(x, "_"), `[`, 1)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
group_summary
group_summary$combo
group_summary$MPF_length
data
colnames(data)
data$MPF_length
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 2. Compute relative abundance per sample#
# -------------------------------#
# (Assuming "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 3. Ensure treatment columns are factors#
# -------------------------------#
# Adjust factor levels as needed.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), , labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 4. Aggregate data by treatment#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of#
# Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# Create a composite grouping variable ("combo") that combines Concentration and MPF_length.#
# This will be used for dodging, while the x-axis itself remains Concentration.#
group_summary <- group_summary %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# Prepare label data (one record per unique treatment: Concentration & MPF_length)#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# -------------------------------#
# 5. Create the stacked and dodged bar plot#
# -------------------------------#
# Mapping:#
#   • x: Concentration (so only concentration appears on the axis)#
#   • y: mean_RelAbundance (the height of the bars)#
#   • fill: Taxon (each bar will be internally stacked by taxon)#
#   • group: combo (ensures that within each Concentration the different MPF_length bars are dodged separately)#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_bar(stat = "identity", #
           position = "stack",#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 3. Compute relative abundance per sample#
# -------------------------------#
# Assumes "index" uniquely identifies each sample.#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 4. Ensure treatment columns are factors#
# -------------------------------#
# Make sure the factor levels for MPF_length match your data.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("C", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 5. Aggregate data by treatment combination#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# Create a composite variable ("combo") for each unique Concentration × MPF_length combination.#
group_summary <- group_summary %>% #
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# For labeling, compute the total stacked height for each combo.#
label_data <- group_summary %>%#
  group_by(combo, Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop")#
#
# -------------------------------#
# 6. Create the stacked bar plot using the composite variable as x#
# -------------------------------#
p <- ggplot(group_summary, aes(x = combo, y = mean_RelAbundance, fill = Taxon)) +#
  geom_bar(stat = "identity", position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  # Modify x-axis labels: display only the Concentration part (before the underscore)#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(#
    y = "Mean Relative Abundance",#
    title = "Community Composition by Treatment"#
  ) +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )
print(p)
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_bar(stat = "identity", #
           position = "stack",#
           width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))#
#
# -------------------------------#
# 6. Add labels above each bar for MPF_length#
# -------------------------------#
p <- p + geom_text(#
  data = label_data,#
  aes(x = Concentration, y = total + 0.05, label = MPF_length),#
  position = position_dodge2(width = 0.9, preserve = "single"),#
  size = 4,#
  vjust = 0#
)
print(p)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format (each row becomes one sample–taxon combination)#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# Compute relative abundance per sample (assuming the column "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
### 2. Set up treatment factors  ####
# Adjust factor levels if necessary. Here we assume that MPF_length in your data is coded as#
# "C", "S", "L" and we relabel them to "Control", "Short", "Long".#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("C", "S", "L"), labels = c("Control", "Short", "Long")),#
    # We treat Concentration as a factor but later convert it to numeric for positioning.#
    Concentration = factor(Concentration)#
  )#
#
### 3. Aggregate taxon-level data  ####
# Calculate the mean relative abundance for each Taxon within each combination.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
### 4. Create custom positioning (dodge) information  ####
# For each unique combination of (Parasite, Concentration, MPF_length), compute:#
#   - The number of MPF_length levels (n_length) for that (Parasite, Concentration).#
#   - An order (the within-group order).#
#   - An offset (so that if n_length == 1, offset = 0; if n_length > 1, offsets are spaced evenly across an interval, say [-0.4, 0.4]).#
#   - A bar width: if only one level, use the full width (e.g., 0.8); otherwise, use 0.8 / n_length.#
group_order <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length) %>%#
  group_by(Parasite, Concentration) %>%#
  arrange(MPF_length) %>% #
  mutate(order_in_group = row_number(),#
         n_length = n(),#
         offset = if_else(n_length == 1, 0, (order_in_group - (n_length + 1) / 2) / n_length * 0.8),#
         bar_width = if_else(n_length == 1, 0.8, 0.8 / n_length)#
  ) %>%#
  ungroup()#
#
# Join these computed values back onto our aggregated data.#
group_summary2 <- group_summary %>%#
  left_join(group_order, by = c("Parasite", "Concentration", "MPF_length")) %>%#
  # Convert Concentration to numeric using its actual value.#
  # (This requires that the factor levels for Concentration are numeric strings.#
  # For example, "0", "50", "100", etc.)#
  mutate(#
    x_center = as.numeric(as.character(Concentration)),#
    x_dodge = x_center + offset#
  )#
#
# For labeling each bar, compute the total height (stack sum) per bar:#
label_data <- group_summary2 %>%#
  group_by(Parasite, Concentration, MPF_length, offset, bar_width, x_center) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(x_dodge = x_center + offset)#
#
### 5. Plot the data  ####
# Here we map x = x_dodge and width = bar_width.#
# Within each bar (at each x_dodge), the Taxa values are stacked.#
p <- ggplot(group_summary2, aes(x = x_dodge, y = mean_RelAbundance, fill = Taxon,#
                                group = interaction(Parasite, Concentration, MPF_length))) +#
  geom_bar(stat = "identity", aes(width = bar_width), position = "stack") +#
  facet_grid(. ~ Parasite) +#
  # Set x-axis breaks as the central x position for each Concentration group.#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)",#
                     breaks = group_order %>%#
                       group_by(Parasite, Concentration) %>%#
                       summarize(center = as.numeric(as.character(Concentration)), .groups = "drop") %>%#
                       pull(center),#
                     labels = function(x) x) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Mean Relative Abundance", title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
x_dodge
group_summary2
data <- read_csv(input_file)#
#
# Identify taxonomic columns (assumed to start with "d__")#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format (each row becomes one sample–taxon combination)#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# Compute relative abundance per sample (assuming the column "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
### 2. Set up treatment factors  ####
# Adjust factor levels if necessary. Here we assume that MPF_length in your data is coded as#
# "C", "S", "L" and we relabel them to "Control", "Short", "Long".#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), labels = c("Control", "Short", "Long")),#
    # We treat Concentration as a factor but later convert it to numeric for positioning.#
    Concentration = factor(Concentration)#
  )#
#
### 3. Aggregate taxon-level data  ####
# Calculate the mean relative abundance for each Taxon within each combination.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
### 4. Create custom positioning (dodge) information  ####
# For each unique combination of (Parasite, Concentration, MPF_length), compute:#
#   - The number of MPF_length levels (n_length) for that (Parasite, Concentration).#
#   - An order (the within-group order).#
#   - An offset (so that if n_length == 1, offset = 0; if n_length > 1, offsets are spaced evenly across an interval, say [-0.4, 0.4]).#
#   - A bar width: if only one level, use the full width (e.g., 0.8); otherwise, use 0.8 / n_length.#
group_order <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length) %>%#
  group_by(Parasite, Concentration) %>%#
  arrange(MPF_length) %>% #
  mutate(order_in_group = row_number(),#
         n_length = n(),#
         offset = if_else(n_length == 1, 0, (order_in_group - (n_length + 1) / 2) / n_length * 0.8),#
         bar_width = if_else(n_length == 1, 0.8, 0.8 / n_length)#
  ) %>%#
  ungroup()#
#
# Join these computed values back onto our aggregated data.#
group_summary2 <- group_summary %>%#
  left_join(group_order, by = c("Parasite", "Concentration", "MPF_length")) %>%#
  # Convert Concentration to numeric using its actual value.#
  # (This requires that the factor levels for Concentration are numeric strings.#
  # For example, "0", "50", "100", etc.)#
  mutate(#
    x_center = as.numeric(as.character(Concentration)),#
    x_dodge = x_center + offset#
  )#
#
# For labeling each bar, compute the total height (stack sum) per bar:#
label_data <- group_summary2 %>%#
  group_by(Parasite, Concentration, MPF_length, offset, bar_width, x_center) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(x_dodge = x_center + offset)#
#
### 5. Plot the data  ####
# Here we map x = x_dodge and width = bar_width.#
# Within each bar (at each x_dodge), the Taxa values are stacked.#
p <- ggplot(group_summary2, aes(x = x_dodge, y = mean_RelAbundance, fill = Taxon,#
                                group = interaction(Parasite, Concentration, MPF_length))) +#
  geom_bar(stat = "identity", aes(width = bar_width), position = "stack") +#
  facet_grid(. ~ Parasite) +#
  # Set x-axis breaks as the central x position for each Concentration group.#
  scale_x_continuous(name = "Microplastic Concentration (µg/L)",#
                     breaks = group_order %>%#
                       group_by(Parasite, Concentration) %>%#
                       summarize(center = as.numeric(as.character(Concentration)), .groups = "drop") %>%#
                       pull(center),#
                     labels = function(x) x) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Mean Relative Abundance", title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
group_summary2
data <- read_csv(csv_path)#
#
# Identify taxonomy columns (assumed to start with "d__")#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 2. Compute relative abundance per sample#
# -------------------------------#
# (Assuming "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 3. Ensure treatment columns are factors#
# -------------------------------#
# Adjust factor levels as needed.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), , labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 4. Aggregate data by treatment#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of#
# Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")#
#
# Create a composite grouping variable ("combo") that combines Concentration and MPF_length.#
# This will be used for dodging, while the x-axis itself remains Concentration.#
group_summary <- group_summary %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# Prepare label data (one record per unique treatment: Concentration & MPF_length)#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# -------------------------------#
# 5. Create the stacked and dodged bar plot#
# -------------------------------#
# Mapping:#
#   • x: Concentration (so only concentration appears on the axis)#
#   • y: mean_RelAbundance (the height of the bars)#
#   • fill: Taxon (each bar will be internally stacked by taxon)#
#   • group: combo (ensures that within each Concentration the different MPF_length bars are dodged separately)#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_col(position="dodge") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
group_summary
print(group_summary, n=100)
head(data)
colnames(data)
data <- read_csv(csv_path)#
#
# Identify taxonomy columns (assumed to start with "d__")#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )
data_long
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()
data_long
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(RelAbundance, na.rm = TRUE), .groups = "drop")
group_summary
print(group_summary, n=150)
data_long
sum()
total_rel_abundance <- data_long %>%#
  filter(index == "KA001") %>%#
  summarize(total = sum(RelAbundance, na.rm = TRUE))#
#
print(total_rel_abundance)
total_rel_abundance <- data_long %>%#
  filter(index == "KA001") %>%#
  summarize(total = sum(Count, na.rm = TRUE))#
#
print(total_rel_abundance)
total_rel_abundance <- data_long %>%#
  filter(index == "KA002") %>%#
  summarize(total = sum(Count, na.rm = TRUE))#
#
print(total_rel_abundance)
data_long
data_long$index
total_rel_abundance <- data_long %>%#
  filter(index == "KA244") %>%#
  summarize(total = sum(Count, na.rm = TRUE))#
#
print(total_rel_abundance)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 2. Compute relative abundance per sample#
# -------------------------------#
# (Assuming "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 3. Ensure treatment columns are factors#
# -------------------------------#
# Adjust factor levels as needed.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), , labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 4. Aggregate data by treatment#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of#
# Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = mean(Count, na.rm = TRUE), .groups = "drop")#
#
# Create a composite grouping variable ("combo") that combines Concentration and MPF_length.#
# This will be used for dodging, while the x-axis itself remains Concentration.#
group_summary <- group_summary %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# Prepare label data (one record per unique treatment: Concentration & MPF_length)#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# -------------------------------#
# 5. Create the stacked and dodged bar plot#
# -------------------------------#
# Mapping:#
#   • x: Concentration (so only concentration appears on the axis)#
#   • y: mean_RelAbundance (the height of the bars)#
#   • fill: Taxon (each bar will be internally stacked by taxon)#
#   • group: combo (ensures that within each Concentration the different MPF_length bars are dodged separately)#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_col(position="dodge") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance",#
       title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# -------------------------------#
# 2. Compute relative abundance per sample#
# -------------------------------#
# (Assuming "index" uniquely identifies each sample)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# -------------------------------#
# 3. Ensure treatment columns are factors#
# -------------------------------#
# Adjust factor levels as needed.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), , labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 4. Aggregate data by treatment#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of#
# Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(mean_RelAbundance = sum(Count, na.rm = TRUE), .groups = "drop")#
#
# Create a composite grouping variable ("combo") that combines Concentration and MPF_length.#
# This will be used for dodging, while the x-axis itself remains Concentration.#
group_summary <- group_summary %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# Prepare label data (one record per unique treatment: Concentration & MPF_length)#
label_data <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(mean_RelAbundance), .groups = "drop") %>%#
  mutate(combo = interaction(Concentration, MPF_length, sep = "_"))#
#
# -------------------------------#
# 5. Create the stacked and dodged bar plot#
# -------------------------------#
# Mapping:#
#   • x: Concentration (so only concentration appears on the axis)#
#   • y: mean_RelAbundance (the height of the bars)#
#   • fill: Taxon (each bar will be internally stacked by taxon)#
#   • group: combo (ensures that within each Concentration the different MPF_length bars are dodged separately)#
p <- ggplot(group_summary, aes(x = Concentration, y = mean_RelAbundance, fill = Taxon, group = MPF_length)) +#
  geom_col(position="dodge") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
data_long
group_summary
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(#
    Counts = sum(Count, na.rm = TRUE),#
    n_rows = n(),#
    .groups = "drop"#
  )
group_summary
print(group_summary,n=1000)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
# Convert from wide to long format so that each row is one sample–taxon combination#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), , labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# -------------------------------#
# 4. Aggregate data by treatment#
# -------------------------------#
# Compute the mean relative abundance for each Taxon within each combination of#
# Parasite, Concentration, and MPF_length.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = mean(Count, na.rm = TRUE), .groups = "drop")
group_summary
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  geom_col(position="dodge") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
print(p)
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  geom_col(position="dodge") +#
  facet_grid(. ~ Parasite) +#
  #scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  #geom_col(position="dodge") +#
  geom_bar(position="dodge", stat="identity")#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  #geom_col(position="dodge") +#
  geom_bar(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  #geom_col(position="dodge") +#
  geom_bar(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon)) +#
  #geom_col(position="dodge") +#
  geom_bar(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon)) +#
  geom_col(position="dodge") +#
  #geom_bar(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon)) +#
  geom_col(position="dodge") +#
  #geom_bar(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon)) +#
  geom_col(position="stack") +#
  #geom_bar(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  geom_col(position="stack") +#
  #geom_bar(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  geom_col(position="stack") +#
  geom_bar(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  geom_col(position="stack") +#
  geom_col(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p <- ggplot(group_summary, aes(x = Concentration, y = Counts, fill = Taxon, group = MPF_length)) +#
  geom_col(position="stack") +#
  #geom_col(position="dodge", stat="identity") +#
  facet_grid(. ~ Parasite) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(x = "Microplastic Concentration (µg/L)",#
       y = "Mean Relative Abundance") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))
p
p
group_summary <- data %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable that uniquely represents each (Concentration, MPF_length) group.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 3. Create the plot.#
#    Here we set x = combo so that each unique bar appears (and is internally stacked by Taxon).#
#    Then we use scale_x_discrete() to re-label the ticks with only the Concentration.#
p <- ggplot(group_summary, aes(x = combo, y = Counts, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Counts") +#
  theme_minimal() +#
  theme(panel.grid.major = element_blank(),#
        panel.grid.minor = element_blank(),#
        legend.title = element_text(size = 12),#
        axis.text = element_text(size = 12),#
        axis.title = element_text(size = 14),#
        strip.text = element_text(size = 14),#
        panel.border = element_rect(color = "gray", fill = NA, size = 1),#
        panel.spacing.x = unit(1, "lines"))#
#
# 4. (Optional) Add text labels above each bar showing the MPF_length.#
#    For that, compute the total counts for each (combo) group.#
label_data <- group_summary %>%#
  group_by(combo, Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(Counts), .groups = "drop")#
#
p <- p + geom_text(#
  data = label_data,#
  aes(x = combo, y = total + 0.05, label = MPF_length),#
  size = 4,#
  vjust = 0#
)
p
head(data)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# 3. (Optional) Compute relative abundances per sample – here we include it for context.#
#    (Assumes "index" uniquely identifies a sample.)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 4. Ensure your treatment columns are factors.#
#    (Adjust levels to match your data; here we assume MPF_length is coded as "C", "S", "L".)#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("C", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 5. Aggregate counts by treatment combination.#
#    This produces summed counts per group: Parasite, Concentration, MPF_length, and Taxon.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable for unique grouping (Concentration + MPF_length).#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 6. Prepare label data: total counts per unique combo (to position MPF_length labels)#
label_data <- group_summary %>%#
  group_by(combo, Parasite, Concentration, MPF_length) %>%#
  summarize(total = sum(Counts), .groups = "drop")#
#
# 7. Create the stacked bar plot.#
#    Here x is set to the composite variable "combo" so that each unique combo is its own bar.#
#    Use scale_x_discrete() to show only the Concentration on the x-axis.#
p <- ggplot(group_summary, aes(x = combo, y = Counts, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Counts") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 8. Add text labels above each bar to indicate the MPF_length.#
p <- p + geom_text(#
  data = label_data,#
  aes(x = combo, y = total + 0.05, label = MPF_length),#
  size = 4,#
  vjust = 0#
)
p
p <- ggplot(group_summary, aes(x = combo, y = Counts, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Counts") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )
p
csv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "level-2-rarefied.csv")#
data <- read_csv(csv_path)#
# 2. Identify taxonomic columns (assumed to start with "d__") and reshape the data#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# 3. (Optional) Compute relative abundances per sample – here we include it for context.#
#    (Assumes "index" uniquely identifies a sample.)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 4. Ensure your treatment columns are factors.#
#    (Adjust levels to match your data; here we assume MPF_length is coded as "C", "S", "L".)#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("C", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 5. Aggregate counts by treatment combination.#
#    This produces summed counts per group: Parasite, Concentration, MPF_length, and Taxon.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable for unique grouping (Concentration + MPF_length).#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 6. Prepare label data: total counts per unique combo (to position MPF_length labels)#
label_data <- group_summary %>%#
  group_by(combo, Parasite, Concentration, MPF_length) %>%#
  summarize(total = mean(Counts), .groups = "drop")#
#
# 7. Create the stacked bar plot.#
#    Here x is set to the composite variable "combo" so that each unique combo is its own bar.#
#    Use scale_x_discrete() to show only the Concentration on the x-axis.#
p <- ggplot(group_summary, aes(x = combo, y = Counts, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Counts") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )
p
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = mean(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable for unique grouping (Concentration + MPF_length).#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 6. Prepare label data: total counts per unique combo (to position MPF_length labels)#
label_data <- group_summary %>%#
  group_by(combo, Parasite, Concentration, MPF_length) %>%#
  summarize(total = mean(Counts), .groups = "drop")#
#
# 7. Create the stacked bar plot.#
#    Here x is set to the composite variable "combo" so that each unique combo is its own bar.#
#    Use scale_x_discrete() to show only the Concentration on the x-axis.#
p <- ggplot(group_summary, aes(x = combo, y = Counts, fill = Taxon)) +#
  geom_col(position = "stack") +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Counts") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )
p
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(total_counts = sum(Counts),#
         Pct = Counts / total_counts * 100) %>%#
  ungroup()#
# 6. Prepare label data: total counts per unique combo (to position MPF_length labels)#
label_data <- group_summary %>%#
  group_by(combo, Parasite, Concentration, MPF_length) %>%#
  summarize(total = mean(Counts), .groups = "drop")#
#
# 7. Create the stacked bar plot.#
#    Here x is set to the composite variable "combo" so that each unique combo is its own bar.#
#    Use scale_x_discrete() to show only the Concentration on the x-axis.#
p <- ggplot(group_summary, aes(x = combo, y = Counts, fill = Taxon)) +#
  geom_col(position = "stack") +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Counts") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )
p
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack") +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(y = "Counts") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )
p
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)  # Each bar sums to 100%#
#
# 8. Create the stacked bar plot.#
#    Use the composite variable "combo" as x; within each, bars are stacked by Taxon with y = Pct.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  # Modify x-axis tick labels: display only the Concentration (the portion before the underscore)#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(name = "Percentage (%)", limits = c(0, 110)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 9. Add text labels above each bar to indicate the MPF_length.#
#    Here we place the label just above 100% (e.g., at 102).#
p <- p + geom_text(#
  data = label_data,#
  aes(x = combo, y = total_pct + 2, label = MPF_length),#
  size = 4,#
  vjust = 0#
)
p
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  # Modify x-axis tick labels: display only the Concentration (the portion before the underscore)#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(name = "Percentage (%)", limits = c(0, 110)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )
p
label_data
p
p <- p + geom_text(#
  data = label_data,#
  aes(x = combo, y = 100 + 0.05, label = MPF_length),#
  size = 4,#
  vjust = 0#
)
p
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# 3. (Optional) Compute relative abundances per sample (for context)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 4. Ensure your treatment columns are factors.#
#    Adjust levels as necessary.#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    # Here we assume MPF_length in your data is coded as "C", "S", "L" and we recode them.#
    MPF_length = factor(MPF_length, levels = c("C", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 5. Aggregate counts by treatment combination.#
#    For each (Parasite, Concentration, MPF_length, Taxon), sum the counts.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable (combo) for unique (Concentration, MPF_length) combinations.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 6. Convert counts to percentages.#
#    For each unique (Parasite, Concentration, MPF_length), compute the total counts#
#    and then compute the percentage for each Taxon (so that percentages across taxa sum to 100).#
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(TotalCounts = sum(Counts),#
         Pct = (Counts / TotalCounts) * 100) %>%#
  ungroup()#
#
# 7. Prepare label data for each unique combo.#
#    Since percentages sum to 100 in each bar, we set the label position just above 100.#
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)#
#
# 8. Create the stacked bar plot.#
#    - Use the composite variable "combo" as x so that each unique (Concentration, MPF_length)#
#      combination forms its own bar.#
#    - Use scale_x_discrete() to relabel the x-axis ticks to show only the Concentration.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(name = "Percentage (%)", limits = c(0, 110)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 9. Add text labels above each bar to indicate the MPF_length.#
#    We use inherit.aes = FALSE to avoid inheriting the fill/group aesthetics from the main plot.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)
p
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# 3. (Optional) Compute relative abundances per sample (for context)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 4. Ensure your treatment columns are factors.#
#    In this example, we set MPF_length so that the levels are "C", "S", "L"#
#    which are then labeled "Control", "Short", and "Long" so that "Short" comes before "Long."#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("C", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 5. Aggregate counts by treatment combination.#
#    For each (Parasite, Concentration, MPF_length, Taxon), sum the counts.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable (combo) for the unique (Concentration, MPF_length) combination.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 6. Convert counts to percentages.#
#    For each unique (Parasite, Concentration, MPF_length) group, compute the total counts#
#    then calculate the percentage for each Taxon (so that percentages sum to 100).#
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(TotalCounts = sum(Counts),#
         Pct = (Counts / TotalCounts) * 100) %>%#
  ungroup()#
#
# 7. Prepare label data for each unique combo.#
#    Since percentages sum to 100 in each bar, we position the MPF_length label just above 100%.#
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)#
#
# 8. Create the stacked bar plot.#
#    We use the composite variable "combo" on the x-axis so that each unique (Concentration, MPF_length)#
#    combination forms its own bar that is internally stacked by Taxon.#
#    Then we use scale_x_discrete() to relabel the x-axis ticks so they display only the Concentration.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(name = "Percentage (%)", limits = c(0, 110)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 9. Add text labels above each bar to indicate the MPF_length.#
#    We set inherit.aes = FALSE so the text layer uses only its own mapping.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)
p
csv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "level-2-rarefied.csv")#
data <- read_csv(csv_path)#
#
# 2. Identify taxonomic columns (assumed to start with "d__") and reshape the data into long format#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# 3. (Optional) Compute relative abundances per sample (for context)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 4. Ensure your treatment columns are factors.#
#    In this example, we set MPF_length so that the levels are "C", "S", "L"#
#    which are then labeled "Control", "Short", and "Long" so that "Short" comes before "Long."#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("C", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 5. Aggregate counts by treatment combination.#
#    For each (Parasite, Concentration, MPF_length, Taxon), sum the counts.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable (combo) for the unique (Concentration, MPF_length) combination.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 6. Convert counts to percentages.#
#    For each unique (Parasite, Concentration, MPF_length) group, compute the total counts#
#    then calculate the percentage for each Taxon (so that percentages sum to 100).#
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(TotalCounts = sum(Counts),#
         Pct = (Counts / TotalCounts) * 100) %>%#
  ungroup()#
#
# 7. Prepare label data for each unique combo.#
#    Since percentages sum to 100 in each bar, we position the MPF_length label just above 100%.#
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)#
#
# 8. Create the stacked bar plot.#
#    We use the composite variable "combo" on the x-axis so that each unique (Concentration, MPF_length)#
#    combination forms its own bar that is internally stacked by Taxon.#
#    Then we use scale_x_discrete() to relabel the x-axis ticks so they display only the Concentration.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(name = "Percentage (%)", limits = c(0, 110)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 9. Add text labels above each bar to indicate the MPF_length.#
#    We set inherit.aes = FALSE so the text layer uses only its own mapping.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)
p
group_summary
data <- read_csv(csv_path)#
#
# 2. Identify taxonomic columns (assumed to start with "d__") and reshape the data into long format#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# 4. Ensure your treatment columns are factors.#
#    In this example, we set MPF_length so that the levels are "C", "S", "L"#
#    which are then labeled "Control", "Short", and "Long" so that "Short" comes before "Long."#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 5. Aggregate counts by treatment combination.#
#    For each (Parasite, Concentration, MPF_length, Taxon), sum the counts.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable (combo) for the unique (Concentration, MPF_length) combination.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 6. Convert counts to percentages.#
#    For each unique (Parasite, Concentration, MPF_length) group, compute the total counts#
#    then calculate the percentage for each Taxon (so that percentages sum to 100).#
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(TotalCounts = sum(Counts),#
         Pct = (Counts / TotalCounts) * 100) %>%#
  ungroup()#
#
# 7. Prepare label data for each unique combo.#
#    Since percentages sum to 100 in each bar, we position the MPF_length label just above 100%.#
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)#
#
# 8. Create the stacked bar plot.#
#    We use the composite variable "combo" on the x-axis so that each unique (Concentration, MPF_length)#
#    combination forms its own bar that is internally stacked by Taxon.#
#    Then we use scale_x_discrete() to relabel the x-axis ticks so they display only the Concentration.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(name = "Percentage (%)", limits = c(0, 110)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 9. Add text labels above each bar to indicate the MPF_length.#
#    We set inherit.aes = FALSE so the text layer uses only its own mapping.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)
p
group_summary
print(group_summary, n=1000)
label_data
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# 3. (Optional) Compute relative abundances per sample (for context; not used in percentage plot)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 4. Ensure your treatment columns are factors.#
#    Here we set MPF_length so that levels are "C", "S", "L" with labels "Control", "Short", "Long"#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 5. Aggregate counts by treatment combination.#
#    For each (Parasite, Concentration, MPF_length, Taxon), sum the counts.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable (combo) by concatenating Concentration and MPF_length.#
  # This will be re-leveled in the next step.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 6. Convert counts to percentages.#
#    For each unique (Parasite, Concentration, MPF_length) group, compute the total counts,#
#    then calculate the percentage for each Taxon so that percentages across taxa sum to 100.#
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(TotalCounts = sum(Counts),#
         Pct = (Counts / TotalCounts) * 100) %>%#
  ungroup()#
#
# 7. Redefine the composite variable "combo" as a factor with levels defined by the desired order.#
#    This ensures that within each Concentration, the MPF_length groups appear in the order#
#    specified in MPF_length's factor (i.e., "Control", "Short", "Long").#
combo_levels <- with(data_long, #
  as.vector(t(outer(levels(Concentration), levels(MPF_length), paste, sep = "_")))#
)#
group_summary <- group_summary %>%#
  mutate(combo = factor(paste(Concentration, MPF_length, sep = "_"), levels = combo_levels))#
#
# 8. Prepare label data for each unique combo.#
#    Since percentages sum to 100 in each bar, position the MPF_length label just above 100%.#
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)#
#
# 9. Create the stacked bar plot.#
#    Here the x-axis uses the composite variable "combo" so that each unique (Concentration, MPF_length)#
#    combination forms its own bar (with taxa stacked by Pct). Then, scale_x_discrete() is used to#
#    relabel the x-axis ticks to show only the Concentration.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(name = "Percentage (%)", limits = c(0, 110)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  labs(title = "Community Composition by Treatment") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 10. Add text labels above each bar to indicate the MPF_length.#
#      Use inherit.aes = FALSE so that only the specified mapping (x, y, label) is used.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)
p
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(name = "Percentage (%)", limits = c(0, 110)) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 10. Add text labels above each bar to indicate the MPF_length.#
#      Use inherit.aes = FALSE so that only the specified mapping (x, y, label) is used.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)
p
colnames(data)
library(stringr)
csv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "level-2-rarefied.csv")#
data <- read_csv(csv_path)#
#
# 2. Identify taxonomic columns (assumed to start with "d__") and reshape the data into long format#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# (Optional) Compute relative abundances per sample for context (not used in the percentage plot)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 3. Ensure treatment columns are factors.#
#    Here MPF_length is recoded using levels "C", "S", "L" which are labeled as "Control", "Short", "Long"#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 4. Aggregate counts by treatment combination.#
#    For each (Parasite, Concentration, MPF_length, Taxon), sum the counts.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable ("combo") for unique (Concentration, MPF_length) combinations.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 5. Convert counts to percentages.#
#    For each unique (Parasite, Concentration, MPF_length), compute total counts and percentage per Taxon.#
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(TotalCounts = sum(Counts),#
         Pct = (Counts / TotalCounts) * 100) %>%#
  ungroup()#
#
# 6. Clean up Taxon labels:#
#    Remove the prefix "d__Bacteria;p__" and replace any occurrence of "__" with "Unknown".#
group_summary <- group_summary %>%#
  mutate(Taxon_clean = str_replace(Taxon, "^d__Bacteria;p__", ""),#
         Taxon_clean = if_else(Taxon_clean == "__", "Unknown", Taxon_clean))#
#
# 7. Redefine the composite variable "combo" as a factor.#
#    This step is optional if you want to ensure a specific order.#
#    For each Concentration, MPF_length levels will appear in the order defined in the MPF_length factor.#
combo_levels <- with(data_long, #
  as.vector(t(outer(levels(Concentration), levels(MPF_length), paste, sep = "_")))#
)#
group_summary <- group_summary %>%#
  mutate(combo = factor(paste(Concentration, MPF_length, sep = "_"), levels = combo_levels))#
#
# 8. Prepare label data for each unique combo.#
#    Since percentages sum to 100 in each bar, position the MPF_length label just above 100.#
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)#
#
# 9. Create the stacked bar plot.#
#    - x-axis: composite variable "combo" (later re-labeled to show only Concentration)#
#    - y-axis: Percentage (Pct)#
#    - fill: Taxon_clean (cleaned taxon labels)#
#    - Facet by Parasite.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon_clean)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(#
    name = "Percentage (%)",#
    limits = c(0, 110),#
    breaks = c(0, 25, 50, 100)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 10. Add text labels above each bar to indicate the MPF_length.#
#     Use inherit.aes = FALSE to avoid inheriting the fill/group aesthetics.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)#
#
# 11. Display and save the plot.#
print(p)
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# (Optional) Compute relative abundances per sample for context (not used in the percentage plot)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 3. Ensure treatment columns are factors.#
#    Here MPF_length is recoded using levels "C", "S", "L" which are labeled as "Control", "Short", "Long"#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 4. Aggregate counts by treatment combination.#
#    For each (Parasite, Concentration, MPF_length, Taxon), sum the counts.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable ("combo") for unique (Concentration, MPF_length) combinations.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 5. Convert counts to percentages.#
#    For each unique (Parasite, Concentration, MPF_length), compute total counts and percentage per Taxon.#
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(TotalCounts = sum(Counts),#
         Pct = (Counts / TotalCounts) * 100) %>%#
  ungroup()#
#
# 6. Clean up Taxon labels:#
#    Remove the prefix "d__Bacteria;p__" and replace any occurrence of "__" with "Unknown".#
#group_summary <- group_summary %>%#
#  mutate(Taxon_clean = str_replace(Taxon, "^d__Bacteria;p__", ""),#
#         Taxon_clean = if_else(Taxon_clean == "__", "Unclassified", Taxon_clean))#
group_summary <- group_summary %>%#
  mutate(Taxon_clean = case_when(#
    Taxon == "d__Bacteria;__" ~ "Unclassified",#
    str_detect(Taxon, "^d__Bacteria;p__") ~ str_replace(Taxon, "^d__Bacteria;p__", ""),#
    TRUE ~ Taxon  # If it doesn't match either case, leave it as-is.#
  )) %>%#
  # Also, if after removal the Taxon becomes "__", replace it with "Unclassified"#
  mutate(Taxon_clean = if_else(Taxon_clean == "__", "Unclassified", Taxon_clean))#
#
# 7. Redefine the composite variable "combo" as a factor.#
#    This step is optional if you want to ensure a specific order.#
#    For each Concentration, MPF_length levels will appear in the order defined in the MPF_length factor.#
combo_levels <- with(data_long, #
  as.vector(t(outer(levels(Concentration), levels(MPF_length), paste, sep = "_")))#
)#
group_summary <- group_summary %>%#
  mutate(combo = factor(paste(Concentration, MPF_length, sep = "_"), levels = combo_levels))#
#
# 8. Prepare label data for each unique combo.#
#    Since percentages sum to 100 in each bar, position the MPF_length label just above 100.#
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)#
#
# 9. Create the stacked bar plot.#
#    - x-axis: composite variable "combo" (later re-labeled to show only Concentration)#
#    - y-axis: Percentage (Pct)#
#    - fill: Taxon_clean (cleaned taxon labels)#
#    - Facet by Parasite.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon_clean)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(#
    name = "Percentage (%)",#
    limits = c(0, 110),#
    breaks = c(0, 50, 100)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 10. Add text labels above each bar to indicate the MPF_length.#
#     Use inherit.aes = FALSE to avoid inheriting the fill/group aesthetics.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)
p
data <- read_csv(csv_path)#
#
# 2. Identify taxonomic columns (assumed to start with "d__") and reshape the data into long format#
taxa_cols <- grep("^d__", names(data), value = TRUE)#
#
data_long <- data %>%#
  pivot_longer(#
    cols = all_of(taxa_cols),#
    names_to = "Taxon",#
    values_to = "Count"#
  )#
#
# (Optional) Compute relative abundances per sample for context (not used in the percentage plot)#
data_long <- data_long %>%#
  group_by(index) %>%#
  mutate(RelAbundance = Count / sum(Count, na.rm = TRUE)) %>%#
  ungroup()#
#
# 3. Ensure treatment columns are factors.#
#    Here MPF_length is recoded using levels "C", "S", "L" which are labeled as "Control", "Short", "Long"#
data_long <- data_long %>%#
  mutate(#
    Parasite = factor(Parasite, levels = c("NP", "P"), labels = c("No Parasite", "Parasite")),#
    MPF_length = factor(MPF_length, levels = c("0", "S", "L"), labels = c("Control", "Short", "Long")),#
    Concentration = factor(Concentration)#
  )#
#
# 4. Aggregate counts by treatment combination.#
#    For each (Parasite, Concentration, MPF_length, Taxon), sum the counts.#
group_summary <- data_long %>%#
  group_by(Parasite, Concentration, MPF_length, Taxon) %>%#
  summarize(Counts = sum(Count, na.rm = TRUE), .groups = "drop") %>%#
  # Create a composite variable ("combo") for unique (Concentration, MPF_length) combinations.#
  mutate(combo = paste(Concentration, MPF_length, sep = "_"))#
#
# 5. Convert counts to percentages.#
#    For each unique (Parasite, Concentration, MPF_length), compute total counts and percentage per Taxon.#
group_summary <- group_summary %>%#
  group_by(Parasite, Concentration, MPF_length) %>%#
  mutate(TotalCounts = sum(Counts),#
         Pct = (Counts / TotalCounts) * 100) %>%#
  ungroup()#
#
# 6. Clean up Taxon labels:#
#    Remove the prefix "d__Bacteria;p__" and replace any occurrence of "__" with "Unknown".#
#group_summary <- group_summary %>%#
#  mutate(Taxon_clean = str_replace(Taxon, "^d__Bacteria;p__", ""),#
#         Taxon_clean = if_else(Taxon_clean == "__", "Unclassified", Taxon_clean))#
group_summary <- group_summary %>%#
  mutate(Taxon_clean = case_when(#
    Taxon == "d__Bacteria;__" ~ "Unclassified",#
    str_detect(Taxon, "^d__Bacteria;p__") ~ str_replace(Taxon, "^d__Bacteria;p__", ""),#
    TRUE ~ Taxon  # If it doesn't match either case, leave it as-is.#
  )) %>%#
  # Also, if after removal the Taxon becomes "__", replace it with "Unclassified"#
  mutate(Taxon_clean = if_else(Taxon_clean == "__", "Unclassified", Taxon_clean))#
# Now reorder the Taxon_clean factor:#
all_taxa <- sort(setdiff(unique(group_summary$Taxon_clean), "Unclassified"))#
ordered_levels <- c("Unclassified", all_taxa)#
group_summary <- group_summary %>%#
  mutate(Taxon_clean = factor(Taxon_clean, levels = ordered_levels))#
# 7. Redefine the composite variable "combo" as a factor.#
#    This step is optional if you want to ensure a specific order.#
#    For each Concentration, MPF_length levels will appear in the order defined in the MPF_length factor.#
combo_levels <- with(data_long, #
  as.vector(t(outer(levels(Concentration), levels(MPF_length), paste, sep = "_")))#
)#
group_summary <- group_summary %>%#
  mutate(combo = factor(paste(Concentration, MPF_length, sep = "_"), levels = combo_levels))#
#
# 8. Prepare label data for each unique combo.#
#    Since percentages sum to 100 in each bar, position the MPF_length label just above 100.#
label_data <- group_summary %>%#
  distinct(Parasite, Concentration, MPF_length, combo) %>%#
  mutate(total_pct = 100)#
#
# 9. Create the stacked bar plot.#
#    - x-axis: composite variable "combo" (later re-labeled to show only Concentration)#
#    - y-axis: Percentage (Pct)#
#    - fill: Taxon_clean (cleaned taxon labels)#
#    - Facet by Parasite.#
p <- ggplot(group_summary, aes(x = combo, y = Pct, fill = Taxon_clean)) +#
  geom_col(position = "stack", width = 0.8) +#
  facet_grid(. ~ Parasite) +#
  scale_x_discrete(#
    name = "Microplastic Concentration (µg/L)",#
    labels = function(x) sapply(strsplit(x, "_"), `[`, 1)#
  ) +#
  scale_y_continuous(#
    name = "Percentage (%)",#
    limits = c(0, 110),#
    breaks = c(0, 50, 100)#
  ) +#
  scale_fill_viridis_d(name = "Taxa", option = "plasma") +#
  theme_minimal() +#
  theme(#
    panel.grid.major = element_blank(),#
    panel.grid.minor = element_blank(),#
    legend.title = element_text(size = 12),#
    axis.text = element_text(size = 12),#
    axis.title = element_text(size = 14),#
    strip.text = element_text(size = 14),#
    panel.border = element_rect(color = "gray", fill = NA, size = 1),#
    panel.spacing.x = unit(1, "lines")#
  )#
#
# 10. Add text labels above each bar to indicate the MPF_length.#
#     Use inherit.aes = FALSE to avoid inheriting the fill/group aesthetics.#
p <- p + geom_text(#
  data = label_data,#
  mapping = aes(x = combo, y = total_pct + 2, label = MPF_length),#
  inherit.aes = FALSE,#
  size = 4,#
  vjust = 0#
)#
#
# 11. Display and save the plot.#
print(p)
