setwd('~/tadpole-data')
# Load required libraries#
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence: when concentration is "0", it's Absent#
merged_data$MicroplasticPresence <- ifelse(merged_data$MicroplasticConcentration == "0", "Absent", "Present")#
merged_data$MicroplasticPresence <- factor(merged_data$MicroplasticPresence, levels = c("Absent", "Present"))
# Test for differences in Simpson diversity by MicroplasticPresence (Control vs. Treatment)#
kw_presence <- kruskal.test(simpson ~ MicroplasticPresence, data = merged_data)#
print(kw_presence)#
#
# Test for differences by Parasite status#
kw_parasite <- kruskal.test(simpson ~ Parasite, data = merged_data)#
print(kw_parasite)
# Subset data to include only treated samples (microplastics present)#
treated_data <- subset(merged_data, MicroplasticPresence == "Present")#
#
# Drop unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# Check counts#
table(treated_data$MicroplasticConcentration)#
table(treated_data$MicroplasticLength)
# Test for differences in Simpson diversity by MicroplasticLength#
kw_length <- kruskal.test(simpson ~ MicroplasticLength, data = treated_data)#
print(kw_length)#
#
# Test for differences in Simpson diversity by MicroplasticConcentration#
kw_concentration <- kruskal.test(simpson ~ MicroplasticConcentration, data = treated_data)#
print(kw_concentration)#
#
# Test for differences in Simpson diversity by Parasite (within treated samples)#
kw_treated_parasite <- kruskal.test(simpson ~ Parasite, data = treated_data)#
print(kw_treated_parasite)#
#
# Dunn's post-hoc test for MicroplasticConcentration among treated samples#
dunn_concentration <- dunn.test(treated_data$simpson, treated_data$MicroplasticConcentration, method = "bonferroni")#
print(dunn_concentration)#
#
# Dunn's test for MicroplasticLength:#
dunn_length <- dunn.test(treated_data$simpson, treated_data$MicroplasticLength, method = "bonferroni")#
print(dunn_length)
# Subset data to include only treated samples (microplastics present)#
treated_data <- subset(merged_data, MicroplasticPresence == "Present")#
#
# Drop unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# Check counts#
table(treated_data$MicroplasticConcentration)#
table(treated_data$MicroplasticLength)#
#
# Test for differences in Simpson diversity by MicroplasticLength#
kw_length <- kruskal.test(simpson ~ MicroplasticLength, data = treated_data)#
print(kw_length)#
#
# Test for differences in Simpson diversity by MicroplasticConcentration#
kw_concentration <- kruskal.test(simpson ~ MicroplasticConcentration, data = treated_data)#
print(kw_concentration)#
#
# Test for differences in Simpson diversity by Parasite (within treated samples)#
kw_treated_parasite <- kruskal.test(simpson ~ Parasite, data = treated_data)#
print(kw_treated_parasite)#
#
# Dunn's post-hoc test for MicroplasticConcentration among treated samples#
dunn_concentration <- dunn.test(treated_data$simpson, treated_data$MicroplasticConcentration, method = "bonferroni")#
print(dunn_concentration)#
#
# Dunn's test for MicroplasticLength:#
dunn_length <- dunn.test(treated_data$simpson, treated_data$MicroplasticLength, method = "bonferroni")#
print(dunn_length)#
# Scheirer-Ray-Hare test#
#
library(rcompanion)#
#
scheirerRayHare(simpson ~ MicroplasticLength * MicroplasticConcentration * Parasite, data = merged_data)#
scheirerRayHare(simpson ~ MicroplasticPresence * Parasite, data = merged_data)
# Create an interaction factor combining MicroplasticPresence and Parasite#
merged_data$interactionGroup <- interaction(merged_data$MicroplasticPresence, merged_data$Parasite)#
#
# Run Dunn's test on the response variable 'simpson' across the interaction groups#
dunn_result <- dunn.test(merged_data$simpson, merged_data$interactionGroup, method = "bonferroni")#
#
# Print the results#
print(dunn_result)
merged_data$interactionGroup
merged_data$MicroplasticPresence
merged_data$Parasite
\
kw_presence <- kruskal.test(simpson ~ MicroplasticPresence, data = merged_data)#
print(kw_presence)
kw_parasite <- kruskal.test(simpson ~ Parasite, data = merged_data)#
print(kw_parasite)
merged_data$interactionGroup <- interaction(merged_data$MicroplasticLength, #
                                              merged_data$MicroplasticConcentration, #
                                              merged_data$Parasite, sep = "_")#
#
# Run the Kruskal-Wallis test on the combined groups#
kw_result <- kruskal.test(simpson ~ interactionGroup, data = merged_data)#
print(kw_result)
library(qiime2R)#
library(ggplot2)#
library(gamlss)#
library(dplyr)#
#
# Read in environment variables from .Renviron#
readRenviron(".Renviron")#
#
# -------------------------------------------------#
# 1. Load and Merge Simpson Alpha Diversity Data#
# -------------------------------------------------#
#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Expected output:#
#   SampleID_full   simpson#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Simpson column if needed (here it's already named "simpson")#
#
# Merge Simpson data into your existing metadata (my_data)#
#
my_data <- read.csv(csv_path, header = TRUE, stringsAsFactors = FALSE)#
#
# Create a full sample ID to match those in qza datafile#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
my_data <- merge(my_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
#
# Filter out any rows missing Simpson data#
my_data <- my_data[!is.na(my_data$simpson), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))
library(dplyr)#
#
# Read in environment variables from .Renviron#
readRenviron(".Renviron")#
#
# -------------------------------------------------#
# 1. Load and Merge Simpson Alpha Diversity Data#
# -------------------------------------------------#
#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Expected output:#
#   SampleID_full   simpson#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Simpson column if needed (here it's already named "simpson")#
#
# Merge Simpson data into your existing metadata (my_data)#
#
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)#
# Create a full sample ID to match those in qza datafile#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
my_data <- merge(my_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
#
# Filter out any rows missing Simpson data#
my_data <- my_data[!is.na(my_data$simpson), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# -------------------------------------------------#
# 3. Overall Model: Controls vs. Treatments#
# -------------------------------------------------#
#
# Create a pared-down data frame with only the necessary columns#
model_data_overall <- my_data[, c("simpson", "MicroplasticPresence", "Parasite")]#
#
# Check that the data has the expected levels#
table(model_data_overall$MicroplasticPresence)#
table(model_data_overall$Parasite)#
#
# Fit the overall gamlss BCT model (modeling only μ; sigma, nu, and tau estimated as intercept-only)#
model_overall_simpson <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_simpson)#
plot(model_overall_simpson)#
wp(model_overall_simpson)
head(my_data)
Sys.getenv("BASE_DATA_PATH")
head(simpson_data)
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)
merged_data <- merge(my_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)
head(simpson_data)
colnames(simpson_data)
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"#
# Expected output:#
#   SampleID_full   simpson#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Simpson column if needed (here it's already named "simpson")#
#
# Merge Simpson data into your existing metadata (my_data)#
#
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)#
#
# Create a matching SampleID_full in the treatment data#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))
head(simpson_data)
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(my_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)
my_data <- my_data[!is.na(my_data$simpson), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# -------------------------------------------------#
# 3. Overall Model: Controls vs. Treatments#
# -------------------------------------------------#
#
# Create a pared-down data frame with only the necessary columns#
model_data_overall <- my_data[, c("simpson", "MicroplasticPresence", "Parasite")]#
#
# Check that the data has the expected levels#
table(model_data_overall$MicroplasticPresence)#
table(model_data_overall$Parasite)#
#
# Fit the overall gamlss BCT model (modeling only μ; sigma, nu, and tau estimated as intercept-only)#
model_overall_simpson <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_simpson)#
plot(model_overall_simpson)#
wp(model_overall_simpson)
my_data <- merge(my_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(my_data)#
# Filter out any rows missing Simpson data#
my_data <- my_data[!is.na(my_data$simpson), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# -------------------------------------------------#
# 3. Overall Model: Controls vs. Treatments#
# -------------------------------------------------#
#
# Create a pared-down data frame with only the necessary columns#
model_data_overall <- my_data[, c("simpson", "MicroplasticPresence", "Parasite")]#
#
# Check that the data has the expected levels#
table(model_data_overall$MicroplasticPresence)#
table(model_data_overall$Parasite)#
#
# Fit the overall gamlss BCT model (modeling only μ; sigma, nu, and tau estimated as intercept-only)#
model_overall_simpson <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_simpson)#
plot(model_overall_simpson)#
wp(model_overall_simpson)
head(my_data)
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"#
# Expected output:#
#   SampleID_full   simpson#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Simpson column if needed (here it's already named "simpson")#
#
# Merge Simpson data into your existing metadata (my_data)#
#
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)#
#
# Create a matching SampleID_full in the treatment data#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
my_data <- merge(my_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(my_data)
my_data <- my_data[!is.na(my_data$simpson), ]
head(my_data)
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# -------------------------------------------------#
# 3. Overall Model: Controls vs. Treatments#
# -------------------------------------------------#
#
# Create a pared-down data frame with only the necessary columns#
model_data_overall <- my_data[, c("simpson", "MicroplasticPresence", "Parasite")]
head(model_data_overall)
# Check that the data has the expected levels#
table(model_data_overall$MicroplasticPresence)#
table(model_data_overall$Parasite)#
#
# Fit the overall gamlss BCT model (modeling only μ; sigma, nu, and tau estimated as intercept-only)#
model_overall_simpson <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_simpson)#
plot(model_overall_simpson)#
wp(model_overall_simpson)
# Check that the data has the expected levels#
table(model_data_overall$MicroplasticPresence)#
table(model_data_overall$Parasite)#
#
# Fit the overall gamlss BCT model (modeling only μ; sigma, nu, and tau estimated as intercept-only)#
model_overall_simpson <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_simpson)#
plot(model_overall_simpson)#
wp(model_overall_simpson)
p_overall_simpson <- ggplot(model_data_overall, #
                            aes(x = MicroplasticPresence, y = simpson, fill = Parasite)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = Parasite), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  labs(title = "Simpson Diversity by Microplastic Presence & Parasite",#
       x = "Microplastic Presence",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_overall_simpson
p_treated_simpson <- ggplot(treated_data, #
                            aes(x = MicroplasticConcentration, y = simpson, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = MicroplasticLength), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simpson Diversity in Treated Samples",#
       x = "Microplastic Concentration",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_treated_simpson
p_treated_simpson <- ggplot(model_data_overall, #
                            aes(x = MicroplasticConcentration, y = simpson, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = MicroplasticLength), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simpson Diversity in Treated Samples",#
       x = "Microplastic Concentration",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_treated_simpson
p_treated_simpson <- ggplot(my_data, #
                            aes(x = MicroplasticConcentration, y = simpson, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = MicroplasticLength), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simpson Diversity in Treated Samples",#
       x = "Microplastic Concentration",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_treated_simpson
p_treated_simpson <- ggplot(my_data, #
                            aes(x = MicroplasticConcentration, y = simpson, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = MicroplasticLength), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simpson Diversity",#
       x = "Microplastic Concentration",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_treated_simpson
p_treated_simpson <- ggplot(my_data, #
                            aes(x = MicroplasticConcentration, y = simpson, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = MicroplasticLength), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simpson Diversity",#
       x = "Microplastic Concentration",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())#
#
p_treated_simpson
head(my_data)
p_treated_simpson <- ggplot(my_data, #
                            aes(x = MicroplasticConcentration, y = simpson, fill = MicroplasticLength)) +#
  geom_boxplot(outlier.shape = NA, position = position_dodge(width = 0.8), alpha = 0.7) +#
  geom_jitter(aes(color = MicroplasticLength), #
              position = position_dodge(width = 0.8), #
              size = 2, alpha = 0.8) +#
  facet_wrap(~ Parasite) +#
  labs(title = "Simpson Diversity",#
       x = "Microplastic Concentration",#
       y = "Simpson Diversity") +#
  theme_minimal() +#
  theme(legend.title = element_blank())
p_treated_simpson
library(qiime2R)#
library(ggplot2)#
library(lme4)#
library(lmerTest)#
library(dplyr)#
# For post-hoc Dunn's test:#
library(dunn.test)#
#
readRenviron(".Renviron")#
#
# -------------------------------#
# Load and Prepare Simpson Diversity Data#
# -------------------------------#
#
# Read the exported Simpson diversity TSV file#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"#
#
# -------------------------------#
# Load Treatment Metadata and Merge#
# -------------------------------#
#
# Load the treatments CSV file (metadata)#
treatment_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(treatment_data)#
#
# Create a matching SampleID_full in the treatment data#
treatment_data$SampleID_full <- sprintf("KA%03d", as.numeric(treatment_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
merged_data <- merge(treatment_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(merged_data)#
#
# -------------------------------#
# Prepare Treatment Variables#
# -------------------------------#
#
# Convert treatment variables to factors using appropriate columns#
merged_data$MicroplasticLength <- factor(merged_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
merged_data$MicroplasticConcentration <- factor(merged_data$Concentration..µg.L., levels = c("0", "10", "40"))#
merged_data$Parasite <- factor(merged_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence: when concentration is "0", it's Absent#
merged_data$MicroplasticPresence <- ifelse(merged_data$MicroplasticConcentration == "0", "Absent", "Present")#
merged_data$MicroplasticPresence <- factor(merged_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# -------------------------------#
# Overall Effects: Kruskal-Wallis Tests#
# -------------------------------#
#
# Test for differences in Simpson diversity by MicroplasticPresence (Control vs. Treatment)#
kw_presence <- kruskal.test(simpson ~ MicroplasticPresence, data = merged_data)#
print(kw_presence)#
#
# 	Kruskal-Wallis rank sum test#
#
# data:  simpson by MicroplasticPresence#
# Kruskal-Wallis chi-squared = 1.6629, df = 1, p-value = 0.1972#
#
# Test for differences by Parasite status#
kw_parasite <- kruskal.test(simpson ~ Parasite, data = merged_data)#
print(kw_parasite)#
#
# 	Kruskal-Wallis rank sum test#
#
# data:  simpson by Parasite#
# Kruskal-Wallis chi-squared = 0.091187, df = 1, p-value = 0.7627#
# -------------------------------#
# Full interaction model as a single variable:#
# -------------------------------#
#
merged_data$interactionGroup <- interaction(merged_data$MicroplasticLength, #
                                              merged_data$MicroplasticConcentration, #
                                              merged_data$Parasite, sep = "_")#
#
# Run the Kruskal-Wallis test on the combined groups#
kw_result <- kruskal.test(simpson ~ interactionGroup, data = merged_data)#
print(kw_result)#
#
# 	Kruskal-Wallis rank sum test#
#
# data:  simpson by interactionGroup#
# Kruskal-Wallis chi-squared = 10.885, df = 9, p-value = 0.2837#
# -------------------------------#
# Effects Among Treated Samples Only#
# -------------------------------#
#
# Subset data to include only treated samples (microplastics present)#
treated_data <- subset(merged_data, MicroplasticPresence == "Present")#
#
# Drop unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# Check counts#
table(treated_data$MicroplasticConcentration)#
table(treated_data$MicroplasticLength)#
#
# Test for differences in Simpson diversity by MicroplasticLength#
kw_length <- kruskal.test(simpson ~ MicroplasticLength, data = treated_data)#
print(kw_length)#
#
# Test for differences in Simpson diversity by MicroplasticConcentration#
kw_concentration <- kruskal.test(simpson ~ MicroplasticConcentration, data = treated_data)#
print(kw_concentration)#
#
# Test for differences in Simpson diversity by Parasite (within treated samples)#
kw_treated_parasite <- kruskal.test(simpson ~ Parasite, data = treated_data)#
print(kw_treated_parasite)#
#
# Dunn's post-hoc test for MicroplasticConcentration among treated samples#
dunn_concentration <- dunn.test(treated_data$simpson, treated_data$MicroplasticConcentration, method = "bonferroni")#
print(dunn_concentration)#
#
# Dunn's test for MicroplasticLength:#
dunn_length <- dunn.test(treated_data$simpson, treated_data$MicroplasticLength, method = "bonferroni")#
print(dunn_length)#
# Scheirer-Ray-Hare test#
library(rcompanion)#
#
# note there is no scheirerRayHare that handles 3 factors in R, so here is our two factor test:#
scheirerRayHare(simpson ~ MicroplasticPresence * Parasite, data = merged_data)#
# DV:  simpson #
# Observations:  98 #
# D:  1 #
# MS total:  808.5 #
#
#                               Df Sum Sq      H p.value#
# MicroplasticPresence           1   1362 1.6842 0.19437#
# Parasite                       1     91 0.1125 0.73735#
# MicroplasticPresence:Parasite  1   3438 4.2520 0.03920#
# Residuals                     94  73551               #
# interaction factor combining MicroplasticPresence and Parasite#
merged_data$interactionGroup <- interaction(merged_data$MicroplasticPresence, merged_data$Parasite)#
#
# Run Dunn's test on the response variable 'simpson' across the interaction groups#
dunn_result <- dunn.test(merged_data$simpson, merged_data$interactionGroup, method = "bonferroni")#
#
# Print the results#
print(dunn_result)#
#
# Kruskal-Wallis rank sum test#
#
# data: x and group#
# Kruskal-Wallis chi-squared = 6.0274, df = 3, p-value = 0.11#
#                         Comparison of x by group                            #
#                                 (Bonferroni)                                  #
# Col Mean-|#
# Row Mean |   Absent.N   Absent.P   Present.#
# ---------+---------------------------------#
# Absent.P |  -1.704353#
#         |     0.2649#
#         |#
# Present. |  -0.587846   1.601514#
#         |     1.0000     0.3278#
#         |#
# Present. |   0.148750   2.364461   1.208179#
#         |     1.0000     0.0542     0.6809#
#
# alpha = 0.05#
# Reject Ho if p <= alpha/2#
#
# only thing that comes close to significant here is Microplastic presence x microplastic Abscence with parasite present
library(qiime2R)#
library(ggplot2)#
library(gamlss)#
library(dplyr)#
#
# Read in environment variables from .Renviron#
readRenviron(".Renviron")#
#
# -------------------------------------------------#
# 1. Load and Merge Simpson Alpha Diversity Data#
# -------------------------------------------------#
#
tsv_path <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_simpson.tsv")#
# Read the Simpson data (assumes tab-delimited with a header)#
simpson_data <- read.table(tsv_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)#
head(simpson_data)#
#
# Rename the first column to "SampleID_full" and the second column to "simpson"#
names(simpson_data)[1] <- "SampleID_full"#
names(simpson_data)[2] <- "simpson"#
# Expected output:#
#   SampleID_full   simpson#
#   KA001           0.8831962#
#   KA011           0.9256630#
#   ...#
#
# Rename the Simpson column if needed (here it's already named "simpson")#
#
# Merge Simpson data into your existing metadata (my_data)#
#
my_data <- read.csv(file.path(Sys.getenv("BASE_DATA_PATH"),#
                                     "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv"),#
                           header = TRUE, stringsAsFactors = FALSE)#
head(my_data)#
#
# Create a matching SampleID_full in the treatment data#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Merge treatment metadata with Simpson diversity data#
my_data <- merge(my_data, simpson_data, by = "SampleID_full", all.x = TRUE)#
head(my_data)#
# Filter out any rows missing Simpson data#
my_data <- my_data[!is.na(my_data$simpson), ]#
#
# -------------------------------------------------#
# 2. Prepare Treatment Variables#
# -------------------------------------------------#
#
# Convert treatment variables to factors.#
# (Replace these column names with the actual column names from your CSV.)#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$MicroplasticConcentration == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# -------------------------------------------------#
# 3. Overall Model: Controls vs. Treatments#
# -------------------------------------------------#
#
# Create a pared-down data frame with only the necessary columns#
model_data_overall <- my_data[, c("simpson", "MicroplasticPresence", "Parasite")]#
#
# Check that the data has the expected levels#
table(model_data_overall$MicroplasticPresence)#
table(model_data_overall$Parasite)#
#
# Fit the overall gamlss BCT model (modeling only μ; sigma, nu, and tau estimated as intercept-only)#
model_overall_simpson <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_simpson)
model_overall_sigma <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  sigma.formula = ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_sigma)
# Subset the data to include only treated samples (where microplastics are present)#
treated_data <- subset(my_data, MicroplasticPresence == "Present")#
#
# Create a new data frame that includes only the necessary columns#
treated_data <- treated_data[, c("simpson", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]#
#
# Drop any unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# Check the counts to confirm the expected levels for the treatment factors#
table(treated_data$MicroplasticConcentration)#
table(treated_data$MicroplasticLength)#
#
# Fit the gamlss BCT model for treated samples (modeling only μ)#
model_treated_simpson <- gamlss(#
  simpson ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  family = BCT,#
  data = treated_data,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_treated_simpson)
model_treated_simpson_sigma <- gamlss(#
  simpson ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  sigma.formula = ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  family = BCT,#
  data = treated_data,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_treated_simpson_sigma)
model_treated_simpson_sigma <- gamlss(#
  simpson ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  sigma.formula = ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  family = BCT,#
  data = treated_data,#
  control = gamlss.control(n.cyc = 100)#
)#
summary(model_treated_simpson_sigma)
model_treated_simpson <- gamlss(#
  simpson ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  family = BCT,#
  data = treated_data,#
  control = gamlss.control(n.cyc = 100)#
)#
summary(model_treated_simpson)
model_treated_simpson_sigma <- gamlss(#
  simpson ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  sigma.formula = ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
  family = BCT,#
  data = treated_data,#
  control = gamlss.control(n.cyc = 100)#
)#
summary(model_treated_simpson_sigma)
model_data_overall <- my_data[, c("simpson", "MicroplasticPresence", "Parasite")]#
#
# Check that the data has the expected levels#
table(model_data_overall$MicroplasticPresence)#
table(model_data_overall$Parasite)#
#
# Fit the overall gamlss BCT model (modeling only μ; sigma, nu, and tau estimated as intercept-only)#
model_overall_simpson <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 50)#
)#
summary(model_overall_simpson)#
plot(model_overall_simpson)#
wp(model_overall_simpson)
plot(model_overall_simpson)
model_overall_sigma <- gamlss(#
  simpson ~ MicroplasticPresence * Parasite,#
  sigma.formula = ~ MicroplasticPresence * Parasite,#
  family = BCT,#
  data = model_data_overall,#
  control = gamlss.control(n.cyc = 100)#
)#
summary(model_overall_sigma)
plot(model_overall_sigma)
# -------------------------------------------------#
# PERMANOVA Analysis Using Bray-Curtis Distance Matrix#
# -------------------------------------------------#
#
# Load required libraries#
library(vegan)#
library(dplyr)#
#
# 1. Load Treatment Metadata#
# Adjust the path and file name as needed.#
metadata_path <- file.path(Sys.getenv("BASE_DATA_PATH"),#
                           "Metadata for microbiota analysis.xlsx - PES MPF paper metadata.csv")#
my_data <- read.csv(metadata_path, header = TRUE, stringsAsFactors = FALSE)#
#
# Create a full sample ID (assuming sample IDs need formatting as "KA001", etc.)#
my_data$SampleID_full <- sprintf("KA%03d", as.numeric(my_data$Sample.ID))#
#
# Convert treatment variables to factors#
my_data$MicroplasticLength <- factor(my_data$MPF.length..Long.Short., levels = c("0", "S", "L"))#
my_data$MicroplasticConcentration <- factor(my_data$Concentration..µg.L., levels = c("0", "10", "40"))#
my_data$Parasite <- factor(my_data$Parasite..P.parasite.NP.non.parasite., levels = c("NP", "P"))#
#
# Create a binary variable for microplastic presence (control vs. treatment)#
my_data$MicroplasticPresence <- ifelse(my_data$Concentration..µg.L. == "0", "Absent", "Present")#
my_data$MicroplasticPresence <- factor(my_data$MicroplasticPresence, levels = c("Absent", "Present"))#
#
# 2. Load Bray-Curtis Distance Matrix#
# The file is expected to be a TSV with row names corresponding to SampleID_full.#
bray_file <- file.path(Sys.getenv("BASE_DATA_PATH"), "rarefied_bray_curtis_distance.tsv")#
bray_matrix <- read.table(bray_file, header = TRUE, sep = "\t", row.names = 1, check.names = FALSE)#
#
# Convert the matrix to a 'dist' object (required by adonis)#
bray_dist <- as.dist(bray_matrix)#
#
# 3. Match Metadata with Distance Matrix Samples#
# Identify common samples between metadata and distance matrix#
common_samples <- intersect(rownames(bray_matrix), my_data$SampleID_full)#
my_data_subset <- my_data[my_data$SampleID_full %in% common_samples, ]#
#
# Reorder the metadata to match the order of the distance matrix rows, if needed#
my_data_subset <- my_data_subset[match(rownames(bray_matrix), my_data_subset$SampleID_full), ]#
#
# 4. Run PERMANOVA#
# Here, we're testing for differences in community composition based on MicroplasticLength,#
# MicroplasticConcentration, and Parasite (and their interactions).#
set.seed(123)  # Set seed for reproducibility of permutations#
adonis_result <- adonis(bray_dist ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                        data = my_data_subset,#
                        permutations = 999)#
#
# Print the PERMANOVA results#
print(adonis_result)
my_data_subset
adonis_result <- adonis2(bray_dist ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                        data = my_data_subset,#
                        permutations = 999)
head(my_Data_subset)
head(my_data_subset)
bray_dist
adonis_result <- adonis2(bray_dist ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                        data = my_data_subset,#
                        permutations = 999)
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")])#
#
common_samples_complete <- intersect(rownames(bray_matrix), my_data_subset_complete$SampleID_full)#
my_data_subset_complete <- my_data_subset_complete[match(common_samples_complete, my_data_subset_complete$SampleID_full), ]#
bray_matrix_complete <- as.dist(bray_matrix[common_samples_complete, common_samples_complete])#
#
set.seed(123)  # For reproducibility#
adonis_result <- adonis2(bray_matrix_complete ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                         data = my_data_subset_complete,#
                         permutations = 999)#
print(adonis_result)
adonis_result <- adonis2(bray_matrix_complete ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                         data = my_data_subset_complete,#
                         permutations = 999,#
                         by = "margin")#
print(adonis_result)
# Make sure your metadata includes MicroplasticPresence and Parasite as factors#
my_data_subset_complete$MicroplasticPresence <- factor(my_data_subset_complete$MicroplasticPresence, levels = c("Absent", "Present"))#
my_data_subset_complete$Parasite <- factor(my_data_subset_complete$Parasite, levels = c("NP", "P"))#
#
# Run PERMANOVA with just MicroplasticPresence and Parasite (and their interaction)#
set.seed(123)  # For reproducibility of permutations#
adonis_result_simple <- adonis2(bray_matrix_complete ~ MicroplasticPresence * Parasite,#
                                data = my_data_subset_complete,#
                                permutations = 999)#
#
# Print the results#
print(adonis_result_simple)
head(my_data_subset_complete)
# Remove rows with missing values in the key variables#
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "Parasite")])#
#
common_samples_complete <- intersect(rownames(bray_matrix), my_data_subset_complete$SampleID_full)#
my_data_subset_complete <- my_data_subset_complete[match(common_samples_complete, my_data_subset_complete$SampleID_full), ]#
bray_matrix_complete <- as.dist(bray_matrix[common_samples_complete, common_samples_complete])#
#
# Make sure your metadata includes MicroplasticPresence and Parasite as factors#
my_data_subset_complete$MicroplasticPresence <- factor(my_data_subset_complete$MicroplasticPresence, levels = c("Absent", "Present"))#
my_data_subset_complete$Parasite <- factor(my_data_subset_complete$Parasite, levels = c("NP", "P"))#
#
# Run PERMANOVA with just MicroplasticPresence and Parasite (and their interaction)#
set.seed(123)  # For reproducibility of permutations#
adonis_result_simple <- adonis2(bray_matrix_complete ~ MicroplasticPresence * Parasite,#
                                data = my_data_subset_complete,#
                                permutations = 999)#
#
# Print the results#
print(adonis_result_simple)
# Run PERMANOVA with just MicroplasticPresence and Parasite (and their interaction)#
set.seed(123)  # For reproducibility of permutations#
adonis_result_simple <- adonis2(bray_matrix_complete ~ MicroplasticPresence * Parasite,#
                                data = my_data_subset_complete,#
                                permutations = 999,#
                                by = "margin")#
#
# Print the results#
print(adonis_result_simple)
# Run PERMANOVA with just MicroplasticPresence and Parasite (and their interaction)#
set.seed(123)  # For reproducibility of permutations#
adonis_result_simple <- adonis2(bray_matrix_complete ~ MicroplasticPresence * Parasite,#
                                data = my_data_subset_complete,#
                                permutations = 999,#
                                by = "terms")#
#
# #
# Print the results#
print(adonis_result_simple)
# Run PERMANOVA with just MicroplasticPresence and Parasite (and their interaction)#
set.seed(123)  # For reproducibility of permutations#
adonis_result_simple <- adonis2(bray_matrix_complete ~ MicroplasticPresence * Parasite,#
                                data = my_data_subset_complete,#
                                permutations = 999,#
                                by = "terms")#
#
# #
# Print the results#
print(adonis_result_simple)
set.seed(123)  # For reproducibility of permutations#
adonis_result_simple <- adonis2(bray_matrix_complete ~ MicroplasticPresence * Parasite,#
                                data = my_data_subset_complete,#
                                permutations = 999,#
                                by = "onedf")#
#
# #
# Print the results#
print(adonis_result_simple)
# 1. Subset the Metadata for Treated Samples#
treated_data <- subset(my_data_subset_complete, MicroplasticPresence == "Present")#
#
# Drop any unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# 2. Subset the Bray-Curtis Distance Matrix for Treated Samples#
# Identify common samples between the treated metadata and the distance matrix#
common_treated <- intersect(rownames(bray_matrix_complete), treated_data$SampleID_full)#
#
# Reorder the metadata to match the distance matrix order#
treated_data <- treated_data[match(common_treated, treated_data$SampleID_full), ]#
#
# Subset the distance matrix to only include the treated samples#
bray_matrix_treated <- as.dist(as.matrix(bray_matrix_complete)[common_treated, common_treated])#
#
# 3. Run PERMANOVA on the Treated Samples#
# Here we test how MicroplasticLength, MicroplasticConcentration, and Parasite (and their interactions)#
# affect community composition among treated samples.#
set.seed(123)  # For reproducibility#
adonis_treated <- adonis2(bray_matrix_treated ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                          data = treated_data,#
                          permutations = 999,#
                          by = "terms")#
print(adonis_treated)
head(treated_data)
head(my_data_subset_complete)
# 1. Subset the Metadata for Treated Samples#
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "MicroplasticLegth", "MicroplasticConcentration", "Parasite")])#
treated_data <- subset(my_data_subset_complete, MicroplasticPresence == "Present")#
#
# Drop any unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# 2. Subset the Bray-Curtis Distance Matrix for Treated Samples#
# Identify common samples between the treated metadata and the distance matrix#
common_treated <- intersect(rownames(bray_matrix_complete), treated_data$SampleID_full)#
#
# Reorder the metadata to match the distance matrix order#
treated_data <- treated_data[match(common_treated, treated_data$SampleID_full), ]#
#
# Subset the distance matrix to only include the treated samples#
bray_matrix_treated <- as.dist(as.matrix(bray_matrix_complete)[common_treated, common_treated])#
#
# 3. Run PERMANOVA on the Treated Samples#
# Here we test how MicroplasticLength, MicroplasticConcentration, and Parasite (and their interactions)#
# affect community composition among treated samples.#
set.seed(123)  # For reproducibility#
adonis_treated <- adonis2(bray_matrix_treated ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                          data = treated_data,#
                          permutations = 999,#
                          by = "terms")#
print(adonis_treated)
head(my_data_subset)
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")])#
#
common_samples_complete <- intersect(rownames(bray_matrix), my_data_subset_complete$SampleID_full)#
my_data_subset_complete <- my_data_subset_complete[match(common_samples_complete, my_data_subset_complete$SampleID_full), ]#
bray_matrix_complete <- as.dist(bray_matrix[common_samples_complete, common_samples_complete])#
#
set.seed(123)  # For reproducibility#
adonis_result <- adonis2(bray_matrix_complete ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                         data = my_data_subset_complete,#
                         permutations = 999,#
                         by = "terms")#
print(adonis_result)
my_data_subset$MicroplasticLength
my_data_subset$MicroplasticLength
my_data_subset$MicroplasticLength
my_data_subset$MicroplasticLength
my_data_subset$MicroplasticLength
my_data_subset$MicroplasticLength
treated_data$MicroplasticLength
my_data_subset_complete$MicroplasticLength
head(treated_data)
my_data_subset_complete$MicroplasticPresence
my_data_subset_complete$MicroplasticPresence
my_data_subset_complete$MicroplasticLength
treated_data$MicroplasticLength
head(my_data_subset_complete)
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "MicroplasticLegth", "MicroplasticConcentration", "Parasite")])
head(my_data_subset)
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "MicroplasticLegth", "MicroplasticConcentration", "Parasite")])
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "MicroplasticLength", "MicroplasticConcentration", "Parasite")])#
# treated_data <- treated_data[complete.cases(treated_data[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]), ]#
treated_data <- subset(my_data_subset_complete, MicroplasticPresence == "Present")
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# 2. Subset the Bray-Curtis Distance Matrix for Treated Samples#
# Identify common samples between the treated metadata and the distance matrix#
common_treated <- intersect(rownames(bray_matrix_complete), treated_data$SampleID_full)#
#
# Reorder the metadata to match the distance matrix order#
treated_data <- treated_data[match(common_treated, treated_data$SampleID_full), ]#
#
# Subset the distance matrix to only include the treated samples#
bray_matrix_treated <- as.dist(as.matrix(bray_matrix_complete)[common_treated, common_treated])#
#
# 3. Run PERMANOVA on the Treated Samples#
# Here we test how MicroplasticLength, MicroplasticConcentration, and Parasite (and their interactions)#
# affect community composition among treated samples.#
set.seed(123)  # For reproducibility#
adonis_treated <- adonis2(bray_matrix_treated ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                          data = treated_data,#
                          permutations = 999,#
                          by = "terms")#
print(adonis_treated)
head(treated_data)
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "MicroplasticLength", "MicroplasticConcentration", "Parasite")])#
# treated_data <- treated_data[complete.cases(treated_data[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]), ]#
treated_data <- subset(my_data_subset_complete, MicroplasticPresence == "Present")#
#
# Drop any unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# 2. Subset the Bray-Curtis Distance Matrix for Treated Samples#
# Identify common samples between the treated metadata and the distance matrix#
common_treated <- intersect(rownames(bray_matrix_complete), treated_data$SampleID_full)#
#
# Reorder the metadata to match the distance matrix order#
treated_data <- treated_data[match(common_treated, treated_data$SampleID_full), ]#
treated_data <- treated_data[, c("SampleID_full",, "MicroplasticLength", "MicroplasticConcentration", "Parasite")]#
#
# Subset the distance matrix to only include the treated samples#
bray_matrix_treated <- as.dist(as.matrix(bray_matrix_complete)[common_treated, common_treated])#
#
# 3. Run PERMANOVA on the Treated Samples#
# Here we test how MicroplasticLength, MicroplasticConcentration, and Parasite (and their interactions)#
# affect community composition among treated samples.#
set.seed(123)  # For reproducibility#
adonis_treated <- adonis2(bray_matrix_treated ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                          data = treated_data,#
                          permutations = 999,#
                          by = "terms")#
print(adonis_treated)
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "MicroplasticLength", "MicroplasticConcentration", "Parasite")])#
# treated_data <- treated_data[complete.cases(treated_data[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]), ]#
treated_data <- subset(my_data_subset_complete, MicroplasticPresence == "Present")#
#
# Drop any unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# 2. Subset the Bray-Curtis Distance Matrix for Treated Samples#
# Identify common samples between the treated metadata and the distance matrix#
common_treated <- intersect(rownames(bray_matrix_complete), treated_data$SampleID_full)#
#
# Reorder the metadata to match the distance matrix order#
treated_data <- treated_data[match(common_treated, treated_data$SampleID_full), ]#
treated_data <- treated_data[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]#
#
# Subset the distance matrix to only include the treated samples#
bray_matrix_treated <- as.dist(as.matrix(bray_matrix_complete)[common_treated, common_treated])#
#
# 3. Run PERMANOVA on the Treated Samples#
# Here we test how MicroplasticLength, MicroplasticConcentration, and Parasite (and their interactions)#
# affect community composition among treated samples.#
set.seed(123)  # For reproducibility#
adonis_treated <- adonis2(bray_matrix_treated ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                          data = treated_data,#
                          permutations = 999,#
                          by = "terms")#
print(adonis_treated)
head(treated_data)
treated_data
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "MicroplasticLength", "MicroplasticConcentration", "Parasite")])#
# treated_data <- treated_data[complete.cases(treated_data[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]), ]#
treated_data <- subset(my_data_subset_complete, MicroplasticPresence == "Present")#
#
# Drop any unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)
head(treated_data)
common_treated <- intersect(rownames(bray_matrix_complete), treated_data$SampleID_full)
head(common_treated)
rownames(bray_matrix_complete)
# 1. Subset the Metadata for Treated Samples#
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "MicroplasticLength", "MicroplasticConcentration", "Parasite")])#
# treated_data <- treated_data[complete.cases(treated_data[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]), ]#
treated_data <- subset(my_data_subset_complete, MicroplasticPresence == "Present")#
#
# Drop any unused factor levels#
treated_data$MicroplasticLength <- droplevels(treated_data$MicroplasticLength)#
treated_data$MicroplasticConcentration <- droplevels(treated_data$MicroplasticConcentration)#
treated_data$Parasite <- droplevels(treated_data$Parasite)#
#
# 2. Subset the Bray-Curtis Distance Matrix for Treated Samples#
# Identify common samples between the treated metadata and the distance matrix#
common_treated <- intersect(rownames(bray_matrix), treated_data$SampleID_full)#
#
# Reorder the metadata to match the distance matrix order#
treated_data <- treated_data[match(common_treated, treated_data$SampleID_full), ]#
treated_data <- treated_data[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")]#
#
# Subset the distance matrix to only include the treated samples#
bray_matrix_treated <- as.dist(as.matrix(bray_matrix)[common_treated, common_treated])#
# 3. Run PERMANOVA on the Treated Samples#
# Here we test how MicroplasticLength, MicroplasticConcentration, and Parasite (and their interactions)#
# affect community composition among treated samples.#
set.seed(123)  # For reproducibility#
adonis_treated <- adonis2(bray_matrix_treated ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                          data = treated_data,#
                          permutations = 999,#
                          by = "terms")#
print(adonis_treated)
# Remove rows with missing values in the key variables#
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticPresence", "Parasite")])#
#
common_samples_complete <- intersect(rownames(bray_matrix), my_data_subset_complete$SampleID_full)#
my_data_subset_complete <- my_data_subset_complete[match(common_samples_complete, my_data_subset_complete$SampleID_full), ]#
bray_matrix_complete <- as.dist(bray_matrix[common_samples_complete, common_samples_complete])#
#
# Make sure your metadata includes MicroplasticPresence and Parasite as factors#
my_data_subset_complete$MicroplasticPresence <- factor(my_data_subset_complete$MicroplasticPresence, levels = c("Absent", "Present"))#
my_data_subset_complete$Parasite <- factor(my_data_subset_complete$Parasite, levels = c("NP", "P"))#
#
# #
# Print the results#
print(adonis_result_simple)#
#
# Run PERMANOVA with just MicroplasticPresence and Parasite (and their interaction)#
set.seed(123)  # For reproducibility of permutations#
adonis_result_simple <- adonis2(bray_matrix_complete ~ MicroplasticPresence * Parasite,#
                                data = my_data_subset_complete,#
                                permutations = 999,#
                                by = "terms")
print(adonis_result_simple)
bray_dist <- as.dist(bray_matrix)#
#
# 3. Match Metadata with Distance Matrix Samples#
# Identify common samples between metadata and distance matrix#
common_samples <- intersect(rownames(bray_matrix), my_data$SampleID_full)#
my_data_subset <- my_data[my_data$SampleID_full %in% common_samples, ]#
#
# Reorder the metadata to match the order of the distance matrix rows, if needed#
my_data_subset <- my_data_subset[match(rownames(bray_matrix), my_data_subset$SampleID_full), ]#
#
# 4. Run PERMANOVA#
# Here, we're testing for differences in community composition based on MicroplasticLength,#
# MicroplasticConcentration, and Parasite (and their interactions).#
set.seed(123)  # Set seed for reproducibility of permutations#
adonis_result <- adonis2(bray_dist ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                        data = my_data_subset,#
                        permutations = 999)#
#
# Print the PERMANOVA results#
print(adonis_result)#
# Remove rows with missing values in the key variables#
my_data_subset_complete <- na.omit(my_data_subset[, c("SampleID_full", "MicroplasticLength", "MicroplasticConcentration", "Parasite")])#
#
common_samples_complete <- intersect(rownames(bray_matrix), my_data_subset_complete$SampleID_full)#
my_data_subset_complete <- my_data_subset_complete[match(common_samples_complete, my_data_subset_complete$SampleID_full), ]#
bray_matrix_complete <- as.dist(bray_matrix[common_samples_complete, common_samples_complete])#
#
set.seed(123)  # For reproducibility#
adonis_result <- adonis2(bray_matrix_complete ~ MicroplasticLength * MicroplasticConcentration * Parasite,#
                         data = my_data_subset_complete,#
                         permutations = 999,#
                         by = "terms")#
print(adonis_result)
library(vegan)#
library(ggplot2)#
library(dplyr)#
#
## -----------------------------#
## 1. NMDS Plot: All Samples#
## (MicroplasticPresence vs Parasite)#
## -----------------------------#
#
# Perform NMDS using the complete Bray-Curtis distance matrix#
nmds_all <- metaMDS(bray_matrix_complete, k = 2, trymax = 100)#
#
# Extract NMDS scores and convert to a data frame#
scores_all <- as.data.frame(scores(nmds_all))#
scores_all$SampleID <- rownames(scores_all)#
#
# Merge with metadata (my_data_subset_complete: must have SampleID_full column)#
scores_all <- merge(scores_all, my_data_subset_complete, #
                    by.x = "SampleID", by.y = "SampleID_full")#
#
# Create a ggplot: color by MicroplasticPresence, shape by Parasite#
p1 <- ggplot(scores_all, aes(x = NMDS1, y = NMDS2, #
                             color = MicroplasticPresence, shape = Parasite)) +#
  geom_point(size = 3) +#
  labs(title = "NMDS: Microplastic Presence vs. Parasite",#
       color = "MP Presence", shape = "Parasite") +#
  theme_minimal()#
#
## Display the first plot#
print(p1)
my_data_subset_complete
nmds_all
scores_all
p1 <- ggplot(scores_all, aes(x = NMDS1, y = NMDS2, #
                             color = MicroplasticPresence, shape = Parasite)) +#
  geom_point(size = 3) +#
  labs(title = "NMDS: Microplastic Presence vs. Parasite",#
       color = "MP Presence", shape = "Parasite") +#
  theme_minimal()
p1
